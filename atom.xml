<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Xiaoke's Blog]]></title>
  <subtitle><![CDATA[未觉池塘春草梦，阶前梧叶已秋声]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.mcxiaoke.com/"/>
  <updated>2015-12-22T09:58:53.000Z</updated>
  <id>http://blog.mcxiaoke.com/</id>
  
  <author>
    <name><![CDATA[mcxiaoke]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Ubuntu上Nginx服务配置笔记]]></title>
    <link href="http://blog.mcxiaoke.com/2015/12/22/ubuntu-nginx-php-python-config-notes/"/>
    <id>http://blog.mcxiaoke.com/2015/12/22/ubuntu-nginx-php-python-config-notes/</id>
    <published>2015-12-22T08:00:00.000Z</published>
    <updated>2015-12-22T09:58:53.000Z</updated>
    <content type="html"><![CDATA[<p>Ubuntu 14.04系统上安装和配置Nginx/MySQL/PHP/Python的一些笔记。</p>
<ul>
<li>初次发布 - 2014-06-30 14:00</li>
<li>更新时间 - 2015-12-22 16:00</li>
</ul>
<h2 id="SSH_u914D_u7F6E"><a href="#SSH_u914D_u7F6E" class="headerlink" title="SSH配置"></a>SSH配置</h2><p>登录服务器，配置SSH</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SSH登录</span></span><br><span class="line">ssh root@<span class="number">8.8</span>.<span class="number">8.8</span> <span class="comment"># 这里替换为你服务器的IP</span></span><br></pre></td></tr></table></figure>
<p>添加用户</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser mcxiaoke <span class="comment">#创建名为mcxiaoke的新用户</span></span><br><span class="line">gpasswd <span class="operator">-a</span> mcxiaoke sudo <span class="comment">#将用户mcxiaoke添加到sudo用户组</span></span><br></pre></td></tr></table></figure>
<p>生成公钥私钥对</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果本地已经有，可以忽略这一步</span></span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="comment">#默认存放在/Users/username/.ssh/[id_rsa, id_ras.pub]</span></span><br><span class="line"><span class="comment"># id_rsa是私钥，id_rsa.pub是公钥</span></span><br></pre></td></tr></table></figure>
<p>复制公钥到服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果本地有ssh-copy-id</span></span><br><span class="line">ssh-copy-id mcxiaoke@<span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"><span class="comment"># 你的公钥会被添加到远程服务器的 .ssh/authorized_keys</span></span><br></pre></td></tr></table></figure>
<p>手动服务公钥到服务器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看你的公钥</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下命令在服务器上执行</span></span><br><span class="line">su - mcxiaoke <span class="comment">#切换用户</span></span><br><span class="line">mkdir .ssh</span><br><span class="line">chmod <span class="number">700</span> .ssh <span class="comment">#更改权限</span></span><br><span class="line">vim .ssh/authorized_keys <span class="comment">#也可以用nano</span></span><br><span class="line"><span class="comment"># 将刚刚打印出来的公钥文本粘贴进来，保存</span></span><br><span class="line">chmod <span class="number">600</span> .ssh/authorized_keys <span class="comment">#更改权限</span></span><br></pre></td></tr></table></figure>
<p>使用公钥登录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 经过以上配置，你已经可以使用公钥登录了</span></span><br><span class="line">ssh mcxiaoke@<span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line"><span class="comment"># 如果不是默认22端口，可以用 -p2222 这样指定端口号</span></span><br></pre></td></tr></table></figure>
<p>修改SSH配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># 可根据需要修改</span></span><br><span class="line">Port <span class="number">2222</span> <span class="comment">#修改默认端口</span></span><br><span class="line">PermitRootLogin no <span class="comment">#禁止ROOT登录</span></span><br><span class="line">PermitEmptyPasswords no <span class="comment">#禁止空密码</span></span><br><span class="line">PasswordAuthentication no <span class="comment">#禁止密码登录</span></span><br></pre></td></tr></table></figure>
<p>重启SSH服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#之后就不能使用密码登录了</span></span><br><span class="line">ssh -p2222 mcxiaoke@<span class="number">8.8</span>.<span class="number">8.8</span></span><br></pre></td></tr></table></figure>
<h2 id="u8F6F_u4EF6_u5305"><a href="#u8F6F_u4EF6_u5305" class="headerlink" title="软件包"></a>软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果是root用户不需要sudo</span></span><br><span class="line"><span class="comment"># 部分系统需要安装sudo</span></span><br><span class="line">apt-get install sudo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新服务器</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装常用包</span></span><br><span class="line">sudo apt-get install curl wget vim git</span><br></pre></td></tr></table></figure>
<p>安装LEMP软件包</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#安装nginx</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> install nginx</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 测试nginx安装成功，假设IP为 8.8.8.8</span></span><br><span class="line"><span class="preprocessor"># 浏览器访问 http://8.8.8.8 确认看到 Welcom to nginx!</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 安装MySQL，可选</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> install mysql-server</span><br><span class="line"><span class="preprocessor"># MySQL初始化配置</span></span><br><span class="line">sudo mysql_install_db</span><br><span class="line"><span class="preprocessor"># MySQL安全配置</span></span><br><span class="line">sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 安装PHP，可选</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> install php5-fpm</span><br><span class="line"><span class="preprocessor"># sudo apt-get install php5-mysql</span></span><br><span class="line"><span class="preprocessor"># 修改PHP配置</span></span><br><span class="line">sudo vim /etc/php5/fpm/php.ini</span><br><span class="line"><span class="preprocessor"># 修改这一行 cgi.fix_pathinfo=0</span></span><br><span class="line"><span class="preprocessor"># 重启PHP服务</span></span><br><span class="line">sudo service php5-fpm restart</span><br></pre></td></tr></table></figure>
<h2 id="Nginx_u914D_u7F6E"><a href="#Nginx_u914D_u7F6E" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>配置Nginx支持PHP</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">    <span class="title">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="title">listen</span> [::]:<span class="number">80</span> default_server ipv6only=<span class="built_in">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果要支持HTTPS，修改这里</span></span><br><span class="line">    <span class="comment"># 可以使用 https://letsencrypt.org 的免费SSL证书</span></span><br><span class="line">    <span class="comment">#listen 443 ssl;</span></span><br><span class="line">    <span class="comment">#ssl_certificate     www.example.com.crt;</span></span><br><span class="line">    <span class="comment">#ssl_certificate_key www.example.com.key;</span></span><br><span class="line">    <span class="comment">#ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;</span></span><br><span class="line">    <span class="comment">#ssl_ciphers         HIGH:!aNULL:!MD5;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重定向所有HTTP到HTTPS</span></span><br><span class="line">	<span class="comment"># rewrite ^(.*)$ https://$host$1 permanent;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 网站根目录，根据需要修改</span></span><br><span class="line">    <span class="title">root</span> /usr/share/nginx/html;</span><br><span class="line">    <span class="comment"># 增加index.php</span></span><br><span class="line">    <span class="title">index</span> index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 假设域名是 ssl.mcxiaoke.com</span></span><br><span class="line">    <span class="title">server_name</span> ssl.mcxiaoke.com; <span class="comment">#绑定域名</span></span><br><span class="line"></span><br><span class="line">    <span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">    <span class="title">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    <span class="title">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="title">root</span> /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">#支持php-fpm的配置</span></span><br><span class="line">    <span class="title">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="title">try_files</span> <span class="variable">$uri</span> =<span class="number">404</span>;</span><br><span class="line">        <span class="title">fastcgi_split_path_info</span><span class="regexp"> ^(.+\.php)(/.+)$</span>;</span><br><span class="line">        <span class="title">fastcgi_pass</span> <span class="url">unix:/var/run/php5-fpm.sock</span>;</span><br><span class="line">        <span class="title">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="title">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="title">include</span> fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后，测试一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启nginx服务</span></span><br><span class="line">sudo service nginx restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加phpinfo</span></span><br><span class="line">sudo vim /usr/share/nginx/html/info.php</span><br><span class="line"><span class="comment"># 写入内容： &lt;?php phpinfo(); ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">sudo service php5-fpm restart</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
<p>浏览器访问 <a href="http://ssl.mcxiaoke.com/info.php" target="_blank" rel="external">http://ssl.mcxiaoke.com/info.php</a> ,如果出现了PHP信息表格，表明配置没有问题，安全起见，建议移除info.php文件。</p>
<p>nginx也支持自动列目录文件的功能</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">location</span> /public &#123;</span><br><span class="line">	<span class="title">autoindex</span> <span class="built_in">on</span>;</span><br><span class="line">	<span class="title">autoindex_exact_size</span> <span class="built_in">off</span>;</span><br><span class="line">	<span class="title">autoindex_localtime</span> <span class="built_in">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Flask_u914D_u7F6E"><a href="#Flask_u914D_u7F6E" class="headerlink" title="Flask配置"></a>Flask配置</h2><p>安装软件包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential python-dev python-pip</span><br><span class="line">sudo pip install uwsgi virtualenv flask</span><br></pre></td></tr></table></figure>
<p>创建示例应用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">virtualenv myapp</span><br><span class="line"><span class="built_in">cd</span> myapp</span><br><span class="line"><span class="built_in">source</span> bin/activate</span><br><span class="line">pip install uwsgi flask</span><br></pre></td></tr></table></figure>
<p>创建一个简单的Flask应用，文件名 <code>myapp.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="decorator">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helloworld</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hello, world.'</span></span><br></pre></td></tr></table></figure>
<h2 id="Gunicorn"><a href="#Gunicorn" class="headerlink" title="Gunicorn"></a>Gunicorn</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装gunicorn</span></span><br><span class="line">pip install gunicorn</span><br><span class="line"><span class="comment">#启动应用</span></span><br><span class="line">gunicorn myapp:app -b localhost:<span class="number">8000</span></span><br></pre></td></tr></table></figure>
<p>或者创建一个 <code>gunicorn_start</code> 的<code>bash</code>脚本文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/usr/bin/env bash</span><br><span class="line"></span></span><br><span class="line">NAME=<span class="string">"HelloFlask"</span></span><br><span class="line"><span class="comment"># 替换为你的实际路径</span></span><br><span class="line">FLASKDIR=/home/mcxiaoke/myapp</span><br><span class="line">VENVDIR=/home/mcxiaoke/myapp</span><br><span class="line">SOCKFILE=//home/mcxiaoke/myapp/app.sock</span><br><span class="line">USER=mcxiaoke</span><br><span class="line">GROUP=mcxiaoke</span><br><span class="line">NUM_WORKERS=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Starting <span class="variable">$NAME</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># activate the virtualenv</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$VENVDIR</span></span><br><span class="line"><span class="built_in">source</span> bin/activate</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$FLASKDIR</span>:<span class="variable">$PYTHONPATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the run directory if it doesn't exist</span></span><br><span class="line">RUNDIR=$(dirname <span class="variable">$SOCKFILE</span>)</span><br><span class="line"><span class="built_in">test</span> <span class="operator">-d</span> <span class="variable">$RUNDIR</span> || mkdir -p <span class="variable">$RUNDIR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start your unicorn</span></span><br><span class="line"><span class="built_in">exec</span> gunicorn myapp:app -b <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span> \</span><br><span class="line">  --name <span class="variable">$NAME</span> \</span><br><span class="line">  --workers <span class="variable">$NUM_WORKERS</span> \</span><br><span class="line">  --user=<span class="variable">$USER</span> --group=<span class="variable">$GROUP</span> \</span><br><span class="line">  --log-level=debug \</span><br><span class="line">  --bind=unix:<span class="variable">$SOCKFILE</span></span><br></pre></td></tr></table></figure>
<p>执行权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x gunicorn_start</span><br><span class="line"><span class="comment"># 测试一下</span></span><br><span class="line">./gunicorn_start</span><br></pre></td></tr></table></figure>
<p>创建应用的nginx站点配置</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo vim /etc/nginx/sites-available/myapp</span></span><br><span class="line"><span class="title">server</span> &#123;</span><br><span class="line">	<span class="title">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">	<span class="title">server_name</span> myapp.mcxiaoke.com;</span><br><span class="line">	<span class="title">location</span> / &#123;</span><br><span class="line">        <span class="title">proxy_pass</span> <span class="url">http://127.0.0.1:8000</span>;</span><br><span class="line">        <span class="comment">#proxy_set_header Host $host;</span></span><br><span class="line">        <span class="comment">#proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">	 &#125;</span><br><span class="line">	 </span><br><span class="line">	 <span class="comment">#location /static &#123;</span></span><br><span class="line">     <span class="comment">#   alias  /home/mcxiaoke/myapp/static/;</span></span><br><span class="line">     <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试一下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用站点</span></span><br><span class="line">sudo ln <span class="operator">-s</span> /etc/nginx/sites-available/myapp /etc/nginx/sites-enabled/</span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure>
<p>打开浏览器，如果能看到页面就说明没问题了。</p>
<h2 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get install supervisor</span><br></pre></td></tr></table></figure>
<p>创建一个supervisor配置文件</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[program:myapp]</span></span><br><span class="line"><span class="setting">command = <span class="value">gunicorn myapp:app -b localhost:<span class="number">8000</span></span></span></span><br><span class="line"><span class="setting">directory = <span class="value">/home/mcxiaoke/myapp</span></span></span><br><span class="line"><span class="setting">user = <span class="value">mcxiaoke</span></span></span><br></pre></td></tr></table></figure>
<p>读取并执行任务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pkill gunicorn</span><br><span class="line">sudo supervisorctl reread</span><br><span class="line">sudo supervisorctl update</span><br><span class="line">sudo supervisorctl start myapp</span><br></pre></td></tr></table></figure>
<h2 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-ubuntu-14-04" target="_blank" rel="external">How To Install LEMP stack on Ubuntu 14.04</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-14-04-lts" target="_blank" rel="external">How To Set Up Nginx Server Blocks on Ubuntu 14.04 LTS</a><br><a href="https://www.linode.com/docs/websites/nginx/how-to-configure-nginx" target="_blank" rel="external">How to Configure Nginx</a><br><a href="https://www.nginx.com/resources/wiki/start/topics/examples/full/" target="_blank" rel="external">Nginx Full Example Configuration</a><br><a href="https://realpython.com/blog/python/kickstarting-flask-on-ubuntu-setup-and-deployment/" target="_blank" rel="external">Kickstarting Flask on Ubuntu - Setup and Deployment</a>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Ubuntu 14.04系统上安装和配置Nginx/MySQL/PHP/Python的一些笔记。</p>
<ul>
<li>初次发布 - 2014-06-30 14:00</li>
<li>更新时间 - 2015-12-22 16:00</li>
</ul>
<h2 id=]]>
    </summary>
    
      <category term="Nginx" scheme="http://blog.mcxiaoke.com/tags/Nginx/"/>
    
      <category term="PHP" scheme="http://blog.mcxiaoke.com/tags/PHP/"/>
    
      <category term="VPS" scheme="http://blog.mcxiaoke.com/tags/VPS/"/>
    
      <category term="Web" scheme="http://blog.mcxiaoke.com/categories/Web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟我一起写EventBus（四）]]></title>
    <link href="http://blog.mcxiaoke.com/2015/08/11/how-to-write-an-eventbus-part4/"/>
    <id>http://blog.mcxiaoke.com/2015/08/11/how-to-write-an-eventbus-part4/</id>
    <published>2015-08-11T06:37:25.000Z</published>
    <updated>2015-08-11T06:42:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u9879_u76EE_u94FE_u63A5"><a href="#u9879_u76EE_u94FE_u63A5" class="headerlink" title="项目链接"></a>项目链接</h2><ul>
<li><a href="https://github.com/mcxiaoke/xBus" target="_blank" rel="external"><code>xBus</code> 项目GitHub地址</a></li>
</ul>
<h2 id="u7CFB_u5217_u6587_u7AE0"><a href="#u7CFB_u5217_u6587_u7AE0" class="headerlink" title="系列文章"></a>系列文章</h2><ul>
<li><a href="/2015/08/03/how-to-write-an-eventbus-part1/"><code>跟我一起写EventBus（一）</code></a></li>
<li><a href="/2015/08/04/how-to-write-an-eventbus-part2/"><code>跟我一起写EventBus（二）</code></a></li>
<li><a href="/2015/08/10/how-to-write-an-eventbus-part3/"><code>跟我一起写EventBus（三）</code></a></li>
</ul>
<h2 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h2><p>前面三部分我们已经实现了一个完整的 <code>EventBus</code> ，这一部分主要是优化和增强，包括事件类型模糊匹配和缓存优化，还有扩展功能和高级用法。</p>
<h2 id="u65B9_u6CD5_u7F13_u5B58"><a href="#u65B9_u6CD5_u7F13_u5B58" class="headerlink" title="方法缓存"></a>方法缓存</h2><p>Java中的反射虽然速度已经很快，但相对于正常的方法调用来说还是慢很多，使用注解也有不小的性能成本，但是通过使用缓存，一次查找多次使用，可以最大程度较少这个成本，实际使用中几乎可以忽略不计。</p>
<p>对于 <code>xBus</code> 来说，主要两种东西需要缓存，一是某个对象包含的事件接收器方法列表，一个是事件类型对应的泛类型列表。前者是在注册时需要查找，后者是在发送事件时需要查找。下面分开说明。</p>
<h3 id="u65B9_u6CD5_u8868_u7F13_u5B58"><a href="#u65B9_u6CD5_u8868_u7F13_u5B58" class="headerlink" title="方法表缓存"></a>方法表缓存</h3><h4 id="u6570_u636E_u7ED3_u6784"><a href="#u6570_u636E_u7ED3_u6784" class="headerlink" title="数据结构"></a>数据结构</h4><p>实现原理其实非常简单，就是用一个Map保存对象和方法列表，但不是保存原始的 <code>Method</code> 对象，而是保存经过处理的 <code>MethodInfo</code> 对象，第三部分里提到过，这个类保存了一些解析出来的额外信息：比如事件类型和分发模式等，它的结构如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Class&lt;?&gt; targetType;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Class&lt;?&gt; eventType;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Bus.EventMode mode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>缓存方法的Map定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, Set&lt;MethodInfo&gt;&gt; sMethodCache =</span><br><span class="line">                <span class="keyword">new</span> ConcurrentHashMap&lt;String, Set&lt;MethodInfo&gt;&gt;();</span><br></pre></td></tr></table></figure>
<p>使用static是为了跨多个<code>Bus</code>实例共享，鉴于大多数应用都是使用默认的实例，改成普通的非static变量也可以。</p>
<h4 id="u7F13_u5B58_u6D41_u7A0B"><a href="#u7F13_u5B58_u6D41_u7A0B" class="headerlink" title="缓存流程"></a>缓存流程</h4><p>调用 <code>register(target)</code> 时会检查方法表缓存，如果不存在，就通过 <code>MethodFinder</code> 查找对象的事件接收器方法，然后添加到缓存；如果存在缓存，直接忽略这一步。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(<span class="keyword">final</span> T target)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 真正的实现代码在 addSubscribers() 里</span></span><br><span class="line">    addSubscribers(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addSubscribers</span><span class="params">(<span class="keyword">final</span> Object target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里找出target里包含的所有事件接收器方法</span></span><br><span class="line">    Set&lt;MethodInfo&gt; methods = getMethods(targetType);</span><br><span class="line">    <span class="keyword">for</span> (MethodInfo method : methods) &#123;</span><br><span class="line">        addSubscriber(subscriber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找方法和缓存的实现在这里</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;MethodInfo&gt; <span class="title">getMethods</span><span class="params">(Class&lt;?&gt; targetClass)</span> </span>&#123;</span><br><span class="line">    String cacheKey = targetClass.getName();</span><br><span class="line">    Set&lt;MethodInfo&gt; methods;</span><br><span class="line">    <span class="keyword">synchronized</span> (Cache.sMethodCache) &#123;</span><br><span class="line">        methods = Cache.sMethodCache.get(cacheKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (methods == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果不存在缓存， 就查找一次</span></span><br><span class="line">        methods = mMethodFinder.find(<span class="keyword">this</span>, targetClass);</span><br><span class="line">        <span class="keyword">synchronized</span> (Cache.sMethodCache) &#123;</span><br><span class="line">        <span class="comment">// 然后添加到方法表缓存</span></span><br><span class="line">            Cache.sMethodCache.put(cacheKey, methods);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> methods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单的测试显示，包含一千个方法的类，一次查找最多可能需要差不多20毫秒，Android应用大多数Activity和Fragment类都不会有这么多方法，大部分情况消耗的时间都在5毫秒以下，详细的性能测试后续会补充。有了缓存之后，后续再进入同一个界面，不需要重复查找，消耗的时间就是零了。</p>
<h3 id="u4E8B_u4EF6_u7C7B_u578B_u7F13_u5B58"><a href="#u4E8B_u4EF6_u7C7B_u578B_u7F13_u5B58" class="headerlink" title="事件类型缓存"></a>事件类型缓存</h3><p>事件类型缓存主要用于事件的泛匹配。在 <code>post(event)</code> 方法中需要用到。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">post</span><span class="params">(E event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; theEventType = event.getClass();</span><br><span class="line">    <span class="keyword">final</span> String cacheKey = theEventType.getName();</span><br><span class="line">    Set&lt;Class&lt;?&gt;&gt; eventTypes;</span><br><span class="line">    <span class="comment">// 检查缓存中是否存在</span></span><br><span class="line">    <span class="keyword">synchronized</span> (Cache.sEventTypeCache) &#123;</span><br><span class="line">        eventTypes = Cache.sEventTypeCache.get(cacheKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (eventTypes == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果没有缓存， 递归查找父类和接口，然后保存到缓存中</span></span><br><span class="line">        eventTypes = Helper.findSuperTypes(theEventType);</span><br><span class="line">        <span class="keyword">synchronized</span> (Cache.sEventTypeCache) &#123;</span><br><span class="line">            Cache.sEventTypeCache.put(cacheKey, eventTypes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; eventType : eventTypes) &#123;</span><br><span class="line">        postEventByType(event, eventType);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u4E8B_u4EF6_u7C7B_u578B_u6A21_u7CCA_u5339_u914D"><a href="#u4E8B_u4EF6_u7C7B_u578B_u6A21_u7CCA_u5339_u914D" class="headerlink" title="事件类型模糊匹配"></a>事件类型模糊匹配</h3><p>这个过程可以简单的理解为是 <code>event instanceof ClassType</code> 的过程，如果事件能强制转换为 <code>ClassType</code> 类型，就可以收到事件。举例，假设 <code>post(event)</code> 中 <code>event</code> 的类型是 ClassA，四个接收器方法的参数类型分别是Object，IClass, BaseClass，ClassA，ClassB，ClassC，那么前面四个方法都可以接收到事件，最后两个类型不匹配，收不到事件，代码示例如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IClass</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> <span class="keyword">implements</span> <span class="title">IClass</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> <span class="keyword">extends</span> <span class="title">BaseClass</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> <span class="keyword">extends</span> <span class="title">ClassA</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassC</span> <span class="keyword">extends</span> <span class="title">ClassB</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventMatchDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postTestEvent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 假设发送的事件类型是 ClassA </span></span><br><span class="line">        ClassA event=<span class="keyword">new</span> ClassA();</span><br><span class="line">        Bus.getDefault().post(event);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent0</span><span class="params">(Object event)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 所有的类都是Object的子类，能收到</span></span><br><span class="line">       <span class="comment">// (event instanceof Object)==True  </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent0</span><span class="params">(IClass event)</span></span>&#123;</span><br><span class="line">        <span class="comment">// ClassA是IClass的实现类，能收到</span></span><br><span class="line">       <span class="comment">// (event instanceof IClass)==True  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent1</span><span class="params">(BaseClass event)</span></span>&#123;</span><br><span class="line">        <span class="comment">// ClassA是BaseClass的子类，能收到</span></span><br><span class="line">        <span class="comment">// (event instanceof BaseClass)==True  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventA</span><span class="params">(ClassA event)</span></span>&#123;</span><br><span class="line">        <span class="comment">// ClassA类型相同，能收到</span></span><br><span class="line">        <span class="comment">//  (event instanceof ClassA)==True  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventB</span><span class="params">(ClassB event)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 收不到，ClassA 不能强制类型转换为ClassB</span></span><br><span class="line">        <span class="comment">// (event instanceof Object)==False  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventC</span><span class="params">(ClassC event)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 收不到，ClassA 不能强制类型转换为ClassC</span></span><br><span class="line">        <span class="comment">// (event instanceof Object)==False  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单的说，发送一个事件 <code>post(event)</code> ，如果 <code>event</code> 对象能转换为 <code>onEvent(SomeType e)</code> 中参数 <code>SomeType</code> 的类型，那么这个方法就能收到事件，否则收不到，遵循Java中一般的类型转换原则。</p>
<h3 id="u6269_u5C55_u63A5_u53E3"><a href="#u6269_u5C55_u63A5_u53E3" class="headerlink" title="扩展接口"></a>扩展接口</h3><h4 id="MethodFinder"><a href="#MethodFinder" class="headerlink" title="MethodFinder"></a>MethodFinder</h4><p>首先是方法查找接口，默认支持注解和方法名两种方式，实现 <code>MethodFinder</code> ，可以设置自定义的方法查找策略。</p>
<p><code>MethodFinder</code> 接口非常简单，返回给定的对象中符合某些条件的方法列表。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodFinder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Set&lt;MethodInfo&gt; <span class="title">find</span><span class="params">(<span class="keyword">final</span> Bus bus, <span class="keyword">final</span> Class&lt;?&gt; targetClass)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="u5176_u5B83_u65B9_u6CD5"><a href="#u5176_u5B83_u65B9_u6CD5" class="headerlink" title="其它方法"></a>其它方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Bus <span class="title">setDebug</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> debug)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Bus <span class="title">setMethodFinder</span><span class="params">(<span class="keyword">final</span> MethodFinder finder)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Bus <span class="title">setStrictMode</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> strictMode)</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>到这里，我们实现了一个完整的 <code>EventBus</code> ，它已经可以用在实际项目中。下一部分，也是最后一部分会介绍它的使用方法和一些自定义配置。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9879_u76EE_u94FE_u63A5"><a href="#u9879_u76EE_u94FE_u63A5" class="headerlink" title="项目链接"></a>项目链接</h2><ul>
<li><a href="https://g]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="EventBus" scheme="http://blog.mcxiaoke.com/tags/EventBus/"/>
    
      <category term="HowTo" scheme="http://blog.mcxiaoke.com/tags/HowTo/"/>
    
      <category term="Java" scheme="http://blog.mcxiaoke.com/tags/Java/"/>
    
      <category term="Android, Java" scheme="http://blog.mcxiaoke.com/categories/Android-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟我一起写EventBus（三）]]></title>
    <link href="http://blog.mcxiaoke.com/2015/08/10/how-to-write-an-eventbus-part3/"/>
    <id>http://blog.mcxiaoke.com/2015/08/10/how-to-write-an-eventbus-part3/</id>
    <published>2015-08-10T03:34:47.000Z</published>
    <updated>2015-08-10T03:40:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u9879_u76EE_u94FE_u63A5"><a href="#u9879_u76EE_u94FE_u63A5" class="headerlink" title="项目链接"></a>项目链接</h2><ul>
<li><a href="https://github.com/mcxiaoke/xBus" target="_blank" rel="external"><code>xBus</code> 项目GitHub地址</a></li>
</ul>
<h2 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h2><p>在 <a href="/2015/08/03/how-to-write-an-eventbus-part1/"><code>跟我一起写EventBus（一）</code></a> 里实现了一个非常粗糙的<code>EventBus</code>，在 <a href="/2015/08/04/how-to-write-an-eventbus-part2/"><code>跟我一起写EventBus（二）</code></a> ，又增加了基类中注册和事件类型宽泛匹配的功能，这一节需要加上在不同线程分发事件的功能，下面会详细解释事件的分发流程。</p>
<p>在不同的线程分发事件（即在指定的线程调用使用了 <code>@BusReceiver</code> 注解的事件接收器的方法），主要支持三种线程：</p>
<ol>
<li>事件发送者（调用 <code>post(event)</code>方法）所在的线程，这是上一版的处理方式，对于大部分场景来说，这都不太合适；</li>
<li>主线程（UI线程），对Android来说，异步任务完成后一般是更新界面，而更新UI必须在主线程中操作，所以这是一个主要用例；</li>
<li>独立线程，另外维护一个线程池，在单独的线程中处理事件，这个适用于需要在事件接收器方法中进行耗时操作的情况，可以避免堵塞发送者线程或主线程。</li>
</ol>
<h2 id="Scheduler_u63A5_u53E3"><a href="#Scheduler_u63A5_u53E3" class="headerlink" title="Scheduler接口"></a>Scheduler接口</h2><p>在不同的线程分发事件，需要一个调度器，这里定义一个简单的调度器 <code>Scheduler</code> 接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">post</span><span class="params">(Runnable runnable)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这和java.util.concurrent.Executor的接口几乎是一样的，其实可以直接使用这个接口，后面接口的实现需要扩充一些功能</span></span><br></pre></td></tr></table></figure>
<p>调度器的作用很简单，就是执行一个 <code>Runnable</code> 定义的任务，可以是同步的、异步的，具体看实现类的定义。</p>
<h3 id="u53D1_u9001_u8005_u7EBF_u7A0B_u5206_u53D1"><a href="#u53D1_u9001_u8005_u7EBF_u7A0B_u5206_u53D1" class="headerlink" title="发送者线程分发"></a>发送者线程分发</h3><p>发送者线程分发是最简单的，直接调用事件接收器的方法即可，使用 <code>Scheduler</code> 接口的实现就是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SenderScheduler</span> <span class="keyword">implements</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bus mBus;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SenderScheduler</span><span class="params">(<span class="keyword">final</span> Bus bus)</span> </span>&#123;</span><br><span class="line">        mBus = bus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(<span class="keyword">final</span> Runnable runnable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 直接调用方法，就是在调用者线程</span></span><br><span class="line">        runnable.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u4E3B_u7EBF_u7A0B_u5206_u53D1"><a href="#u4E3B_u7EBF_u7A0B_u5206_u53D1" class="headerlink" title="主线程分发"></a>主线程分发</h3><p>针对Android系统的特点，要在主线程分发事件，需要用到 <code>Handler</code> ，再定义一个使用Handler的调度器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HandlerScheduler</span> <span class="keyword">implements</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bus mBus;</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HandlerScheduler</span><span class="params">(<span class="keyword">final</span> Bus bus, <span class="keyword">final</span> Handler handler)</span> </span>&#123;</span><br><span class="line">        mBus = bus;</span><br><span class="line">        mHandler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(<span class="keyword">final</span> Runnable runnable)</span> </span>&#123;</span><br><span class="line">        mHandler.post(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有了 <code>HandlerScheduler</code> 这个类，要实现在主线程分发事件就简单了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Scheduler <span class="title">getMainThreadScheduler</span><span class="params">(<span class="keyword">final</span> Bus bus)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> HandlerScheduler(bus, <span class="keyword">new</span> Handler(Looper.getMainLooper()));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="u72EC_u7ACB_u7EBF_u7A0B_u5206_u53D1"><a href="#u72EC_u7ACB_u7EBF_u7A0B_u5206_u53D1" class="headerlink" title="独立线程分发"></a>独立线程分发</h3><p>要在独立线程分发事件，可以使用并发框架里的 <code>Executor</code> ，不用额外的维护线程的创建和终止：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecutorScheduler</span> <span class="keyword">implements</span> <span class="title">Scheduler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Bus mBus;</span><br><span class="line">    <span class="keyword">private</span> Executor mExecutor;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExecutorScheduler</span><span class="params">(<span class="keyword">final</span> Bus bus)</span> </span>&#123;</span><br><span class="line">        mBus = bus;</span><br><span class="line">        mExecutor = Executors.newCachedThreadPool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(<span class="keyword">final</span> Runnable runnable)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在线程池中执行任务</span></span><br><span class="line">        mExecutor.execute(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Scheduler_u4F7F_u7528"><a href="#Scheduler_u4F7F_u7528" class="headerlink" title="Scheduler使用"></a>Scheduler使用</h2><h3 id="u5B9A_u4E49"><a href="#u5B9A_u4E49" class="headerlink" title="定义"></a>定义</h3><p>最后创建三种调度器的工厂方法，调度器这边就准备好了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Schedulers</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scheduler <span class="title">sender</span><span class="params">(<span class="keyword">final</span> Bus bus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SenderScheduler(bus);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scheduler <span class="title">getMainThreadScheduler</span><span class="params">(<span class="keyword">final</span> Bus bus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HandlerScheduler(bus, <span class="keyword">new</span> Handler(Looper.getMainLooper()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scheduler <span class="title">thread</span><span class="params">(<span class="keyword">final</span> Bus bus)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExecutorScheduler(bus);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u4E8B_u4EF6_u6A21_u5F0F"><a href="#u4E8B_u4EF6_u6A21_u5F0F" class="headerlink" title="事件模式"></a>事件模式</h3><p>在<code>Bus</code>类中使用Enum定义三种事件分发模式，在Android应用中，绝大部分的事件处理都是更新界面，因为这里把主线程分发定为默认模式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 事件发送模式：</span><br><span class="line"> *</span><br><span class="line"> * Sender - 在发送者的线程调用<span class="doctag">@BusReceiver</span>/onEvent方法</span><br><span class="line"> * Main - 在主线程调用<span class="doctag">@BusReceiver</span>/onEvent方法（默认为此模式）</span><br><span class="line"> * Thread - 在一个单独的线程调用<span class="doctag">@BusReceiver</span>/onEvent方法</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EventMode &#123;</span><br><span class="line"></span><br><span class="line">    Sender, Main, Thread</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u4F7F_u7528_u65B9_u6CD5"><a href="#u4F7F_u7528_u65B9_u6CD5" class="headerlink" title="使用方法"></a>使用方法</h3><p>在事件接收器方法中使用mode指定分发模式，默认是主线程分发，示例如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// default is main thread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent0</span><span class="params">(String event)</span></span>&#123;</span><br><span class="line">    <span class="comment">// handle event </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@BusReceiver</span>(mode= EventMode.Main)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent1</span><span class="params">(String event)</span></span>&#123;</span><br><span class="line">   <span class="comment">// handle event </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@BusReceiver</span>(mode= EventMode.Sender)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent2</span><span class="params">(String event)</span></span>&#123;</span><br><span class="line">    <span class="comment">// handle event </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@BusReceiver</span>(mode= EventMode.Thread)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent3</span><span class="params">(String event)</span></span>&#123;</span><br><span class="line">    <span class="comment">// handle event </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u4E8B_u4EF6_u5206_u53D1_u6D41_u7A0B"><a href="#u4E8B_u4EF6_u5206_u53D1_u6D41_u7A0B" class="headerlink" title="事件分发流程"></a>事件分发流程</h2><p>目标调用 <code>Bus.getDefault().register(target)</code> 的时候，查找目标对象中包含的事件接收器方法，然后构造 <code>MethodInfo</code> 对象和 <code>Subscriber</code> 对象，保存在Map中，同时保存事件类型和 <code>Subscriber</code> 直接的对应关系，发送者调用 <code>post(event)</code> 时会从Map中查找事件对应的订阅者，然后根据事件分发模式使用 <code>Scheduler</code> 分发事件，大概流程就是这样的，下面是几个重要的数据结构。</p>
<h3 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h3><p><code>Scheduler</code> 接受的是 <code>Runnable</code> 参数，因此我们实现一个事件发送器类 <code>EventEmitter</code> ，它实现了 <code>Runnable</code> 接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Bus.TAG;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Bus bus; <span class="comment">// Bus对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Object event; <span class="comment">// 事件对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Subscriber subscriber; <span class="comment">// 订阅关系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Bus.EventMode mode; <span class="comment">// 分发模式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EventEmitter</span><span class="params">(<span class="keyword">final</span> Bus bus, <span class="keyword">final</span> Object event,</span><br><span class="line">                        <span class="keyword">final</span> Subscriber subscriber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bus = bus;</span><br><span class="line">        <span class="keyword">this</span>.event = event;</span><br><span class="line">        <span class="keyword">this</span>.subscriber = subscriber;</span><br><span class="line">        <span class="keyword">this</span>.mode = subscriber.mode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subscriber.invoke(event);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Subscriber"><a href="#Subscriber" class="headerlink" title="Subscriber"></a>Subscriber</h3><p><code>Subscriber</code> 类保存事件类型，事件接收器方法和事件目标之间的关系，定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> MethodInfo method;<span class="comment">// 保存事件方法的信息，下面会解释</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Object target; <span class="comment">// 事件目标对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Class&lt;?&gt; targetType; <span class="comment">// 目标类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Class&lt;?&gt; eventType; <span class="comment">// 事件类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Bus.EventMode mode; <span class="comment">// 分发模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name; <span class="comment">// 名字</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Subscriber</span><span class="params">(<span class="keyword">final</span> MethodInfo method, <span class="keyword">final</span> Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">this</span>.eventType = method.eventType;</span><br><span class="line">        <span class="keyword">this</span>.targetType = method.targetType;</span><br><span class="line">        <span class="keyword">this</span>.mode = method.mode;</span><br><span class="line">        <span class="keyword">this</span>.name = method.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object event)</span></span><br><span class="line">            <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.method.method.invoke(<span class="keyword">this</span>.target, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="MethodInfo"><a href="#MethodInfo" class="headerlink" title="MethodInfo"></a>MethodInfo</h3><p><code>MethodInfo</code> 保存通过注解或方法名查找到的事件接收器方法的信息，包含 <code>Method</code> 对象和参数类型（也就是接受的事件类型），还有注解指定的分发模式，定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Class&lt;?&gt; targetType;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Class&lt;?&gt; eventType;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Bus.EventMode mode;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MethodInfo</span><span class="params">(<span class="keyword">final</span> Method method, <span class="keyword">final</span> Class&lt;?&gt; targetClass, <span class="keyword">final</span> Bus.EventMode mode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.targetType = targetClass;</span><br><span class="line">        <span class="keyword">this</span>.eventType = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">this</span>.mode = mode;</span><br><span class="line">        <span class="keyword">this</span>.name = targetType.getName() + <span class="string">"."</span> + method.getName()</span><br><span class="line">                + <span class="string">"("</span> + eventType.getName() + <span class="string">")"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u5206_u53D1_u4E8B_u4EF6"><a href="#u5206_u53D1_u4E8B_u4EF6" class="headerlink" title="分发事件"></a>分发事件</h3><p>发送者调用 <code>post(event)</code> 方法时， <code>Bus</code> 会找到所有可能的接受者，然后构造  <code>EventEmitter</code> 对象，调用 <code>sendEvent(emitter)</code> 方法根据接受者指定的分发模式分发每一个事件，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEvent</span><span class="params">(EventEmitter emitter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (EventMode.Sender.equals(emitter.mode)) &#123;</span><br><span class="line">        mSenderScheduler.post(emitter);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EventMode.Main.equals(emitter.mode)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Helper.isMainThread()) &#123;</span><br><span class="line">            mSenderScheduler.post(emitter);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mMainScheduler.post(emitter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (EventMode.Thread.equals(emitter.mode)) &#123;</span><br><span class="line">        mThreadScheduler.post(emitter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>以上就是在发送者线程、主线程、独立线程分发事件的全过程，下一节会介绍事件类型的模糊匹配和缓存优化，还有扩展功能和高级用法。</p>
<h2 id="u7CFB_u5217_u6587_u7AE0"><a href="#u7CFB_u5217_u6587_u7AE0" class="headerlink" title="系列文章"></a>系列文章</h2><ul>
<li><a href="https://github.com/mcxiaoke/xBus#实现教程" target="_blank" rel="external"><code>跟我一起写EventBus（一）</code></a></li>
<li><a href="https://github.com/mcxiaoke/xBus#实现教程" target="_blank" rel="external"><code>跟我一起写EventBus（二）</code></a> </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9879_u76EE_u94FE_u63A5"><a href="#u9879_u76EE_u94FE_u63A5" class="headerlink" title="项目链接"></a>项目链接</h2><ul>
<li><a href="https://g]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="EventBus" scheme="http://blog.mcxiaoke.com/tags/EventBus/"/>
    
      <category term="HowTo" scheme="http://blog.mcxiaoke.com/tags/HowTo/"/>
    
      <category term="Java" scheme="http://blog.mcxiaoke.com/tags/Java/"/>
    
      <category term="Android, Java" scheme="http://blog.mcxiaoke.com/categories/Android-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟我一起写EventBus（二）]]></title>
    <link href="http://blog.mcxiaoke.com/2015/08/04/how-to-write-an-eventbus-part2/"/>
    <id>http://blog.mcxiaoke.com/2015/08/04/how-to-write-an-eventbus-part2/</id>
    <published>2015-08-04T02:15:53.000Z</published>
    <updated>2015-08-04T02:21:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u9879_u76EE_u94FE_u63A5"><a href="#u9879_u76EE_u94FE_u63A5" class="headerlink" title="项目链接"></a>项目链接</h2><ul>
<li><a href="https://github.com/mcxiaoke/xBus" target="_blank" rel="external"><code>xBus</code> 项目GitHub地址</a></li>
</ul>
<h2 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h2><p>在 <a href="/2015/08/03/how-to-write-an-eventbus-part1/">跟我一起写EventBus（一）</a> 里我们实现了一个非常粗糙的<code>EventBus</code>，在这一节里面我们要给这个<code>EventBus</code>添加以下两个功能：</p>
<ul>
<li>支持在基类中调用 <code>register(target)</code> 注册，调用 <code>unregister(target)</code> 取消注册</li>
<li>发送事件时， <code>post(event)</code> 支持匹配基类的事件接收器</li>
</ul>
<h2 id="u57FA_u7C7B_u6CE8_u518C"><a href="#u57FA_u7C7B_u6CE8_u518C" class="headerlink" title="基类注册"></a>基类注册</h2><p>支持 <code>register</code> 和 <code>unregister</code> 在基类中使用，用法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Bus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Bus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">BaseClass</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u4E8B_u4EF6_u7C7B_u578B"><a href="#u4E8B_u4EF6_u7C7B_u578B" class="headerlink" title="事件类型"></a>事件类型</h2><p><code>post(event)</code> 中的 <code>event</code> 可以是事件接收器的参数 <code>eventType</code> 的实现类或子类，用法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 运行这个Demo，控制台的输出是：</span><br><span class="line"> * onCharSequenceEvent() event=A StringBuilder</span><br><span class="line"> * onObjectEvent() event=A StringBuilder</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> EventDemo().run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Bus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">        Bus.getDefault().post(<span class="keyword">new</span> StringBuilder(<span class="string">"A StringBuilder"</span>));</span><br><span class="line">        Bus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStringEvent</span><span class="params">(String event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不会执行，因为event是StringBuilder，event instanceof String == false</span></span><br><span class="line">        System.out.println(<span class="string">"onStringEvent() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExceptionEvent</span><span class="params">(Exception event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不会执行，因为event是StringBuilder，event instanceof Exception == false</span></span><br><span class="line">        System.out.println(<span class="string">"onExceptionEvent() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCharSequenceEvent</span><span class="params">(CharSequence event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 会执行，因为event是StringBuilder，event instanceof CharSequence == true</span></span><br><span class="line">        System.out.println(<span class="string">"onCharSequenceEvent() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onObjectEvent</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 会执行，因为event是StringBuilder，event instanceof Object == true</span></span><br><span class="line">        System.out.println(<span class="string">"onObjectEvent() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u529F_u80FD_u5B9E_u73B0"><a href="#u529F_u80FD_u5B9E_u73B0" class="headerlink" title="功能实现"></a>功能实现</h2><p>下面我们来看看如何实现这两个功能</p>
<h3 id="u652F_u6301_u5728_u57FA_u7C7B_u4E2D_u6CE8_u518C"><a href="#u652F_u6301_u5728_u57FA_u7C7B_u4E2D_u6CE8_u518C" class="headerlink" title="支持在基类中注册"></a>支持在基类中注册</h3><p>首先，注册和取消注册这两个方法默认支持在基类中使用，因为实际运行的程序中并不存在基类的实例，即使你在基类中调用 <code>register(target)</code> ，这个 <code>target</code> 也是实际运行的子类对象，所以基类中注册指示集中了代码，并没有改变运行时的行为。</p>
<p>但是，之前版本的 <code>EventBus</code> 在查找事件接收器方法时只查找了当前类中的方法，忽略了父类和继承链上的方法，因此需要修改先前版本的 <code>findAnnotatedMethods</code> 方法，最简单的思路就是一个 <code>while</code> 循环，递归查找当前类和父类的方法，然后过滤出符合条件的事件接收器方法，我们把检查方法是否符合条件的代码先提到一个单独的方法，叫 <code>isAnnotatedMethod</code> ，然后 <code>findAnnotatedMethods</code> 方法实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Method&gt; <span class="title">findAnnotatedMethods</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; type,</span><br><span class="line">                                               <span class="keyword">final</span> Class&lt;? extends Annotation&gt; annotation)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = type;</span><br><span class="line">    <span class="keyword">final</span> Set&lt;Method&gt; methods = <span class="keyword">new</span> HashSet&lt;Method&gt;();</span><br><span class="line">    <span class="comment">// 逐级查找父类的方法，遇到Object类时停止</span></span><br><span class="line">    <span class="keyword">while</span> (clazz!=Object.class) &#123;</span><br><span class="line">        <span class="keyword">final</span> Method[] allMethods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> Method method : allMethods) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAnnotatedMethod(method, annotation)) &#123;</span><br><span class="line">                methods.add(method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// search more methods in super class</span></span><br><span class="line">        clazz = clazz.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> methods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，和之前版本的差别不大，逻辑几乎一样，就是增加了递归父类查找。这里可以做一点优化，实际查找父类时不需要查找JDK自带的类，针对Android系统，也不需要查找系统框架中的类，因此增加了一个优化的判断方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldSkipClass</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String clsName = clazz.getName();</span><br><span class="line">    <span class="keyword">return</span> Object.class.equals(clazz)</span><br><span class="line">            || clsName.startsWith(<span class="string">"java."</span>)</span><br><span class="line">            || clsName.startsWith(<span class="string">"javax."</span>)</span><br><span class="line">            || clsName.startsWith(<span class="string">"android."</span>)</span><br><span class="line">            || clsName.startsWith(<span class="string">"com.android."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的 <code>while (clazz!=Object.class)</code> 改成 <code>!shouldSkipClass(clazz)</code> ，其它部分不变，这样修改之后，可以大幅提高父类查找的效率，减少很多不必要的遍历。</p>
<p>下面是提取出来的 <code>isAnnotatedMethod</code> 方法，用于判断某个方法是否满足事件接收器的要求：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAnnotatedMethod</span><span class="params">(<span class="keyword">final</span> Method method,</span><br><span class="line">                                         <span class="keyword">final</span> Class&lt;? extends Annotation&gt; annotation)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 是否使用了@BusReceiver的注解，这个放在最上面，一点效率优化</span></span><br><span class="line">    <span class="keyword">if</span> (!method.isAnnotationPresent(annotation)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 过滤掉非public的方法</span></span><br><span class="line">    <span class="keyword">if</span> (!Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 过滤掉`static`的方法</span></span><br><span class="line">    <span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 过滤掉volatile的方法，这里是修复Java编译器自动添加bridge方法造成的方法重复的问题，具体细节比较复杂，这里不提了</span></span><br><span class="line">    <span class="comment">// 这里实际过滤掉的是BRIDGE修饰符修饰的方法，观察Modifier类中的常量定义可以发现，BRIDGE和VOLATILE的值都是0x00000040，但是不存在一个叫Modifier.isBridge的方法，所以用Modifier.isVolatile替代，效果相同</span></span><br><span class="line">    <span class="comment">// Java代码中不允许使用volatile修饰方法，但是编译器不受此限制。还需要提一下的是，Method类中的equals方法没有使用修饰符比较。</span></span><br><span class="line">    <span class="comment">// fix getDeclaredMethods bug, if method in base class,</span></span><br><span class="line">    <span class="comment">// it returns duplicate method,</span></span><br><span class="line">    <span class="comment">// one is normal, the other is the same but with volatile modifier</span></span><br><span class="line">    <span class="keyword">if</span> (Modifier.isVolatile(method.getModifiers())) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// must has only one parameter</span></span><br><span class="line">    <span class="keyword">if</span> (method.getParameterTypes().length != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="u4E8B_u4EF6_u7C7B_u578B_u7684_u5339_u914D"><a href="#u4E8B_u4EF6_u7C7B_u578B_u7684_u5339_u914D" class="headerlink" title="事件类型的匹配"></a>事件类型的匹配</h3><p>在第一节中 <code>EventBus</code> 的实现只支持事件类型对象的精确匹配，那个版本的 <code>post(event)</code> 方法中对事件类型的判断是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (eventClass.equals(method.getParameterTypes()[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<p>我们修改为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; parameterClass = method.getParameterTypes()[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (parameterClass.isAssignableFrom(eventClass)) &#123;</span><br><span class="line"><span class="comment">// post event to receiver</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里解释一下，对于 <code>objectA.isAssignableFrom(classB)</code> ，当 <code>objectA</code> 是 <code>classB</code> 的实现类（如果 <code>classB</code> 是一个接口）或其子类时返回 <code>true</code> ，这里我们判断如果事件类是事件接收器的参数类的实现类或子类就可以向它发送事件。</p>
<h2 id="u4E00_u70B9_u4F18_u5316"><a href="#u4E00_u70B9_u4F18_u5316" class="headerlink" title="一点优化"></a>一点优化</h2><p>第一版 <code>EventBus</code> 我们使用 <code>List&lt;Method&gt;</code> 保存某个对象的方法列表，实际上我们要求这个列表不能有重复的方法存在，所以可以改用<code>Set</code>实现，几处修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// findAnnotatedMethods 方法返回一个 Set&lt;Method&gt;</span></span><br><span class="line"><span class="keyword">final</span> Set&lt;Method&gt; methods = <span class="keyword">new</span> HashSet&lt;Method&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!shouldSkipClass(clazz)) &#123;...&#125;</span><br><span class="line">        </span><br><span class="line"><span class="comment">// Bus类中的mMethodMap类型修改为 Map&lt;Object, Set&lt;Method&gt;&gt;</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;Object, Set&lt;Method&gt;&gt; mMethodMap = <span class="keyword">new</span> WeakHashMap&lt;Object, Set&lt;Method&gt;&gt;();</span><br></pre></td></tr></table></figure>
<h2 id="u5B8C_u6574_u4EE3_u7801"><a href="#u5B8C_u6574_u4EE3_u7801" class="headerlink" title="完整代码"></a>完整代码</h2><ul>
<li>完整的代码见 <a href="https://github.com/mcxiaoke/xBus/tree/tutorial-part2/src/main/com/mcxiaoke/bus" target="_blank" rel="external">tutorial-part2-code</a></li>
<li>代码打包下载 <a href="https://github.com/mcxiaoke/xBus/archive/tutorial-part2.zip" target="_blank" rel="external">tutorial-part2-zip</a></li>
</ul>
<h2 id="u8FDB_u4E00_u6B65_u7684_u95EE_u9898"><a href="#u8FDB_u4E00_u6B65_u7684_u95EE_u9898" class="headerlink" title="进一步的问题"></a>进一步的问题</h2><p>这个版本增加了对继承的支持，放宽了事件接收器参数匹配的规则，还完善了一些细节，做了一些简单的优化，离实用更进一步了，后面还有不少问题需要解决，如下：</p>
<ol>
<li><code>post(event)</code> 方法需要遍历保存所有目标对象的所有方法，这个在方法数量很大时效率同样存在问题，可以改进一下遍历过程，或者可以加缓存，不用每次都遍历。</li>
<li><code>Bus</code> 类直接保存了目标对象 <code>target</code> 的强引用，如果使用者忘记调用 <code>unregister(target)</code> 方法取消注册，可能造成内存泄露，任何改进。</li>
<li><code>Bus</code> 的实现没有考虑在多个线程中使用的问题，没有添加任何同步代码，可能会造成内部数据的不同步，或者发生错误。</li>
<li><code>Bus</code> 的实现不支持外部配置，限定了事件接收器方法只能使用 <code>@BusReceiver</code> ，且只能是<code>public</code>的，只能带一个参数，能不能支持使用者自定义这些行为。</li>
<li>当前的事件接收器不支持泛型参数，不支持集合类型，如果支持，还可以考虑，如何支持多个事件参数和可变参数类型的事件。</li>
<li>当前的 <code>post(event)</code> 方法是在调用者线程执行，在很多情况下，使用者可能需要任务执行的线程和事件接收器的线程是分开的，比如在某个后台线程中执行异步任务，在主线程中接收事件更新界面，这个需要支持用户自定义。</li>
<li>目前的<code>Bus</code>实现没有任何异常处理的代码，一个健壮的程序不能缺少完善的异常处理。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9879_u76EE_u94FE_u63A5"><a href="#u9879_u76EE_u94FE_u63A5" class="headerlink" title="项目链接"></a>项目链接</h2><ul>
<li><a href="https://g]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="EventBus" scheme="http://blog.mcxiaoke.com/tags/EventBus/"/>
    
      <category term="HowTo" scheme="http://blog.mcxiaoke.com/tags/HowTo/"/>
    
      <category term="Java" scheme="http://blog.mcxiaoke.com/tags/Java/"/>
    
      <category term="Android, Java" scheme="http://blog.mcxiaoke.com/categories/Android-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[跟我一起写EventBus（一）]]></title>
    <link href="http://blog.mcxiaoke.com/2015/08/03/how-to-write-an-eventbus-part1/"/>
    <id>http://blog.mcxiaoke.com/2015/08/03/how-to-write-an-eventbus-part1/</id>
    <published>2015-08-03T03:36:27.000Z</published>
    <updated>2015-08-04T02:21:26.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u9879_u76EE_u94FE_u63A5"><a href="#u9879_u76EE_u94FE_u63A5" class="headerlink" title="项目链接"></a>项目链接</h2><ul>
<li><a href="https://github.com/mcxiaoke/xBus" target="_blank" rel="external"><code>xBus</code> 项目GitHub地址</a></li>
</ul>
<h2 id="u4EC0_u4E48_u662FEventBus"><a href="#u4EC0_u4E48_u662FEventBus" class="headerlink" title="什么是EventBus"></a>什么是<code>EventBus</code></h2><p>先介绍一下概念， <code>EventBus</code> 直译过来就是<code>事件总线</code>，它使用发布订阅模式支持组件之间的通信，不需要显式地注册回调，比观察者模式更灵活，可用于替换Java中传统的事件监听模式，<code>EventBus</code>的作用就是解耦，它不是通用的发布订阅系统，也不能用于进程间通信。可用于Android的<code>EventBus</code>库主要有这几个：Google出品的<code>Guava</code>，<code>Guava</code>是一个庞大的库，<code>EventBus</code> 只是它附带的一个小功能，因此实际项目中使用并不多。用的最多的是<a href="https://github.com/greenrobot/EventBus" target="_blank" rel="external"><code>greenrobot/EventBus</code></a>，这个库的优点是接口简洁，集成方便，但是限定了方法名，不支持注解。另一个库<a href="https://github.com/square/otto" target="_blank" rel="external"><code>square/otto</code></a>修改自 <code>Guava</code> ，用的人也不少。</p>
<p>以 <code>greenrobot/EventBus</code> 为例，我们看一下 <code>EventBus</code> 模式的典型用法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 注册EventBus，接受事件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>&#123;</span><br><span class="line">       EventBus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">       EventBus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(SomeEvent1 event)</span></span>&#123;</span><br><span class="line">        <span class="comment">// handle event</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理任务，发送事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// do your work</span></span><br><span class="line">        <span class="comment">// send event</span></span><br><span class="line">        EventBus.getDefault().post(<span class="keyword">new</span> SomeEvent1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u63A5_u53E3_u5B9A_u4E49"><a href="#u63A5_u53E3_u5B9A_u4E49" class="headerlink" title="接口定义"></a>接口定义</h2><p>我们的目标是从零开始自己写一个 <code>EventBus</code> ，参考上面的示例，首先定义接口，假设接口叫 <code>IBus</code> ，实现类叫 <code>Bus</code> ，它最少需要三个方法。为了灵活和简洁，暂时不考虑性能，我们采用 <code>Annotation</code> 的方式指定事件接收者。</p>
<p>接口定义如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBus</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// register event target</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">register</span><span class="params">(Object target)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// unregister event target</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">unregister</span><span class="params">(Object target)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post event</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最简单的用法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SomeEvent</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> BusDemo().show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册EventBus，发送事件</span></span><br><span class="line">    <span class="comment">// 这里为了演示，全部放在一个地方</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Bus.getDefault().register(<span class="keyword">this</span>);</span><br><span class="line">        Bus.getDefault().post(<span class="keyword">new</span> SomeEvent());</span><br><span class="line">        Bus.getDefault().unregister(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须使用这个Annotation</span></span><br><span class="line">    <span class="comment">// 必须是接受一个参数的public方法，没有其它限制</span></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(SomeEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onReceive() event="</span> + event);</span><br><span class="line">        <span class="comment">// handle your event here...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u63A5_u53E3_u5206_u6790"><a href="#u63A5_u53E3_u5206_u6790" class="headerlink" title="接口分析"></a>接口分析</h2><p>上面定义的 <code>IBus</code> 接口有三个方法 <code>register(target)</code> ， <code>unregister(target)</code> ， <code>post(event)</code> ，事件接收器使用<code>Annotation</code>的方式指定，下面逐一考察这些问题：</p>
<ol>
<li>按照接口定义， <code>register(target)</code> 方法用于注册事件接收器的目标对象，我们需要保存这个对象，同时还需要查找这个对象中存在的事件接收器方法，上面说了，这些事件接受器是使用了 <code>@BusReceiver</code> 注解的 <code>public</code> 方法，查找出这些方法之后需要保存这些方法，后续 <code>post(event)</code> 发送事件的时候需要用到。</li>
<li><code>unregister(target)</code> 方法用于取消注册目标对象，调用这个方法之后，不能再给这个对象发送任何事件，也就是要从保存的事件目标对象集合里移除这个对象和对应的事件接收器方法集合，这要求我们能找到这个对象以及这个对象中的事件接受器对象集合。</li>
<li><code>post(event)</code> 方法用于发送事件给目标对象，也就是调用注册了这个事件接收器的方法，这要求我们可以通过事件对象或时间对象类型找到对应的目标对象( <code>target</code> )和事件接收器( ‘@BusReceiver’ )方法。</li>
<li>事件接收器通过 <code>@BusReceiver</code> 这个注解指定，因此我们需要在 <code>register(target)</code> 的时候目标对象中所有使用了这个注解的方法，并排除非 <code>public</code> 的方法， <code>static</code> 方法也需要排除，没有参数或参数超过一个的也要排除。</li>
</ol>
<h2 id="u5F00_u59CB_u5B9E_u73B0"><a href="#u5F00_u59CB_u5B9E_u73B0" class="headerlink" title="开始实现"></a>开始实现</h2><h3 id="u67E5_u627E_u4F7F_u7528_@BusReceiver__u7684_u65B9_u6CD5"><a href="#u67E5_u627E_u4F7F_u7528_@BusReceiver__u7684_u65B9_u6CD5" class="headerlink" title="查找使用 @BusReceiver 的方法"></a>查找使用 <code>@BusReceiver</code> 的方法</h3><p>首先我们要定义 <code>BusReceiver</code> 注解，它的定义很简单，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Target</span>(ElementType.METHOD) <span class="comment">// 表示这个注解适用于方法</span></span><br><span class="line"><span class="annotation">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//表示这个注解需要保留到运行时</span></span><br><span class="line"><span class="keyword">public</span> <span class="annotation">@interface</span> BusReceiver &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们定义一个通用一点的方法叫 <code>findAnnotatedMethods(class,annotation)</code> ，用于查找给定的<code>class</code>里面使用了 <code>Annotation</code> 的方法，为了简化问题，我们先忽略从父类继承的方法，只查找指定类的方法，这个方法是个通用的工具方法，可以放在一个单独的类中，定义为静态方法，假设这个类为<code>Helper</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Method&gt; <span class="title">findAnnotatedMethods</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; type,</span><br><span class="line">                                                    <span class="keyword">final</span> Class&lt;? extends Annotation&gt; annotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Method&gt; methods = <span class="keyword">new</span> ArrayList&lt;Method&gt;();</span><br><span class="line"><span class="comment">//        Class&lt;?&gt; clazz = type;</span></span><br><span class="line">        <span class="comment">// for now ignore super class, handle current class only</span></span><br><span class="line">        Method[] ms = type.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : ms) &#123;</span><br><span class="line">            methods.add(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methods;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这是最简单的查找使用了某个特定注解的方法，按照我们接口的定义，事件接收器方法需要满足这几个条件：</p>
<ul>
<li>使用了 <code>@BusReceiver</code> 注解</li>
<li>是 <code>public</code> 方法，并且不是 <code>static</code> 方法</li>
<li>参数只能是一个，不能没有也不能是多个</li>
</ul>
<p>按照这个条件加上过滤， <code>findAnnotatedMethods</code> 方法最终是这样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Method&gt; <span class="title">findAnnotatedMethods</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; type,</span><br><span class="line">                                                    <span class="keyword">final</span> Class&lt;? extends Annotation&gt; annotation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;Method&gt; methods = <span class="keyword">new</span> ArrayList&lt;Method&gt;();</span><br><span class="line"><span class="comment">//        Class&lt;?&gt; clazz = type;</span></span><br><span class="line">        <span class="comment">// for now ignore super class, handle current class only</span></span><br><span class="line">        Method[] ms = type.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : ms) &#123;</span><br><span class="line">            <span class="comment">// must not static</span></span><br><span class="line">            <span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// must be public</span></span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(method.getModifiers())) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// must has only one parameter</span></span><br><span class="line">            <span class="keyword">if</span> (method.getParameterTypes().length != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// must has annotation</span></span><br><span class="line">            <span class="keyword">if</span> (!method.isAnnotationPresent(annotation)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            methods.add(method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> methods;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>因为判断 <code>Method</code> 的修饰符和参数列表长度比较快， 我们放在前面， <code>method.isAnnotationPresent</code> 这个方法比较慢，放在最后。</p>
<h3 id="register_28target_29__u7684_u5B9E_u73B0"><a href="#register_28target_29__u7684_u5B9E_u73B0" class="headerlink" title="register(target) 的实现"></a><code>register(target)</code> 的实现</h3><p>有了 <code>findAnnotatedMethods</code> 方法， <code>register(target)</code> 的实现就简单多了，这个方法需要找出所有符合条件的事件接收器方法，然后保存起来，由于后面我们要根据对象查找方法，我们将 <code>target:method</code> 关系保存到一个<code>Map</code>中，假设我们的<code>IBus</code>接口的实现类叫<code>Bus</code>，在<code>Bus</code>类中增加一个成员变量保存它们：</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Object, List&lt;<span class="function"><span class="keyword">Method</span>&gt;&gt; <span class="title">mMethodMap</span> = <span class="title">new</span> <span class="title">HashMap</span>&lt;<span class="title">Object</span>, <span class="title">List</span>&lt;<span class="title">Method</span>&gt;&gt;<span class="params">()</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> void <span class="keyword">register</span>(<span class="keyword">final</span> Object target) <span class="comment">&#123;</span><br><span class="line">    List&lt;Method&gt; methods = Helper.findAnnotatedMethods(target.getClass(), BusReceiver.class);</span><br><span class="line">    if (methods == null || methods.isEmpty()) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span></span><br><span class="line">    mMethodMap.put(target, methods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="unregister_28target_29__u7684_u5B9E_u73B0"><a href="#unregister_28target_29__u7684_u5B9E_u73B0" class="headerlink" title="unregister(target) 的实现"></a><code>unregister(target)</code> 的实现</h3><p>有了上面保存的 <code>mMethodMap</code> 数据，取消注册目标就是移除目标对象注册过的所有事件接收器方法，可以这样写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unregister</span><span class="params">(<span class="keyword">final</span> Object target)</span> </span>&#123;</span><br><span class="line">    mMethodMap.remove(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="post_28event_29__u7684_u5B9E_u73B0"><a href="#post_28event_29__u7684_u5B9E_u73B0" class="headerlink" title="post(event) 的实现"></a><code>post(event)</code> 的实现</h3><p><code>xBus</code>的使用者在完成某项任务之后调用 <code>post(event)</code> 方法发送事件，这个方法会遍历所有注册过的<code>target</code>里包含的，接受这个事件的事件接收器方法，因此需要知道怎么从事件对象找到事件接收器，由于可能有多个<code>target</code>都注册了这个事件的接收器，因此我们需要遍历所有的目标对象，找到符合条件的方法，然后调用这些方法。怎么样才算符合条件呢，首先要符合 <code>findAnnotatedMethods</code> 那里提到的条件：使用 <code>@BusReceiver</code> 注解，是 <code>publici</code> 且非 <code>static</code> 方法，有且只有一个参数，针对某个事件 <code>event</code> ，还需要参数类型是一致的，举例说明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对类型为`SomeEvent`的事件`event`，只能发送给如下形式的事件接收器：</span></span><br><span class="line"><span class="comment">// 这里方法名字没有要求，但是注解和方法参数签名不能变</span></span><br><span class="line"><span class="annotation">@BusReceier</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anyMethodName</span><span class="params">(SomeEvent event)</span></span>&#123;</span><br><span class="line"><span class="comment">// handle event</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>能想到的最直接的查找思路就是遍历 <code>mMethods</code> 列表，逐个对比，找出符合要求的方法，然后调用对应的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt; eventClass = event.getClass();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Object, List&lt;Method&gt;&gt; entry : mMethodMap.entrySet()) &#123;</span><br><span class="line">        <span class="keyword">final</span> Object target = entry.getKey();</span><br><span class="line">        <span class="keyword">final</span> List&lt;Method&gt; methods = entry.getValue();</span><br><span class="line">        <span class="keyword">if</span> (methods == <span class="keyword">null</span> || methods.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">        <span class="comment">// 如果事件类型相符，就调用对应的方法发送事件</span></span><br><span class="line">        <span class="comment">// 这里的类型是要求精确匹配的，没有考虑继承</span></span><br><span class="line">            <span class="keyword">if</span> (eventClass.equals(method.getParameterTypes()[<span class="number">0</span>])) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    method.invoke(target, event);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u6D4B_u8BD5_u4E00_u4E0B"><a href="#u6D4B_u8BD5_u4E00_u4E0B" class="headerlink" title="测试一下"></a>测试一下</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BusDemo demo = <span class="keyword">new</span> BusDemo();</span><br><span class="line">        Bus bus = Bus.getDefault();</span><br><span class="line">        bus.register(demo);</span><br><span class="line">        bus.post(<span class="keyword">new</span> Object());</span><br><span class="line">        bus.post(<span class="string">"SomeEvent"</span>);</span><br><span class="line">        bus.post(<span class="number">12345</span>);</span><br><span class="line">        bus.post(<span class="keyword">new</span> RuntimeException(<span class="string">"Error"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有发送这个事件</span></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceiveRunnableNotPost</span><span class="params">(Runnable event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onReceiveRunnableNotPost() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onObjectEvent</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onObjectReceive() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送的事件是`RuntimeException`，不是精确匹配`Exception`</span></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExceptionEvent</span><span class="params">(Exception event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onExceptionEvent() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStringReceive</span><span class="params">(String event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onStringReceive() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BusReceiver</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInteger</span><span class="params">(Integer event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"onInteger() event="</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="u5B8C_u6574_u4EE3_u7801"><a href="#u5B8C_u6574_u4EE3_u7801" class="headerlink" title="完整代码"></a>完整代码</h2><ul>
<li>完整的代码见 <a href="https://github.com/mcxiaoke/xBus/tree/tutorial-part1/src/main/com/mcxiaoke/bus" target="_blank" rel="external">tutorial-part1/src/main</a></li>
<li>详细的示例见 <a href="https://github.com/mcxiaoke/xBus/tree/tutorial-part1/src/demo/com/mcxiaoke/bus/demo" target="_blank" rel="external">tutorial-part1/src/demo</a></li>
<li>代码打包下载 <a href="https://github.com/mcxiaoke/xBus/archive/tutorial-part1.zip" target="_blank" rel="external">archive/tutorial-part1.zip</a></li>
</ul>
<h2 id="u8FDB_u4E00_u6B65_u7684_u95EE_u9898"><a href="#u8FDB_u4E00_u6B65_u7684_u95EE_u9898" class="headerlink" title="进一步的问题"></a>进一步的问题</h2><p>这个粗糙的版本只是实现了一个最基本的<code>EventBus</code>的功能，如果想把它用在实际的项目中，还需要考虑很多问题，比如：</p>
<ol>
<li><code>findAnnotatedMethods</code> 方法没有考虑效率问题，如果某个<code>target</code>中有成千上万个方法，这个方法可能比较慢，是需要考虑缓存或其它的优化方法。</li>
<li><code>post(event)</code>方法需要遍历保存所有目标对象的所有方法，这个在方法数量很大时效率同样存在问题，可以改进一下遍历过程，或者可以加缓存，不用每次都遍历。</li>
<li><code>Bus</code>类直接保存了目标对象<code>target</code>的强引用，如果使用者忘记调用 <code>unregister(target)</code> 方法取消注册，可能造成内存泄露，任何改进。</li>
<li><code>Bus</code>的实现没有考虑在多个线程中使用的问题，没有添加任何同步代码，可能会造成内部数据的不同步，或者发生错误。</li>
<li><code>Bus</code>的实现不支持外部配置，限定了事件接收器方法只能使用 <code>@BusReceiver</code> ，且只能是<code>public</code>的，只能带一个参数，能不能支持使用者自定义这些行为。</li>
<li><code>Bus</code>目前的版本不支持继承，既不支持在基类中注册，也不支持事件接收器方法中参数类型的继承，如何支持。</li>
<li>当前的事件接收器不支持泛型参数，不支持集合类型，如果支持，还可以考虑，如何支持多个事件参数和可变参数类型的事件。</li>
<li>当前的<code>post(event)</code>方法是在调用者线程执行，在很多情况下，使用者可能需要任务执行的线程和事件接收器的线程是分开的，比如在某个后台线程中执行异步任务，在主线程中接收事件更新界面，这个需要支持用户自定义。</li>
<li>目前的<code>Bus</code>实现没有任何异常处理的代码，一个健壮的程序不能缺少完善的异常处理。</li>
</ol>
<p>这些问题都是一个完整的 <code>EventBus</code> 实现需要考虑的问题，教程的后续部分将逐步实现这些功能，解决存在的问题。</p>
<h2 id="u76F8_u5173_u9605_u8BFB"><a href="#u76F8_u5173_u9605_u8BFB" class="headerlink" title="相关阅读"></a>相关阅读</h2><h4 id="u4EC0_u4E48_u662FEventBus-1"><a href="#u4EC0_u4E48_u662FEventBus-1" class="headerlink" title="什么是EventBus"></a>什么是EventBus</h4><p><a href="https://code.google.com/p/guava-libraries/wiki/EventBusExplained" target="_blank" rel="external">https://code.google.com/p/guava-libraries/wiki/EventBusExplained</a><br><a href="http://doc.akka.io/docs/akka/snapshot/java/event-bus.html" target="_blank" rel="external">http://doc.akka.io/docs/akka/snapshot/java/event-bus.html</a>  </p>
<h4 id="EventBus_u7684_u5B9E_u73B0"><a href="#EventBus_u7684_u5B9E_u73B0" class="headerlink" title="EventBus的实现"></a>EventBus的实现</h4><p><a href="http://javarticles.com/2015/04/guava-eventbus-examples.html" target="_blank" rel="external">http://javarticles.com/2015/04/guava-eventbus-examples.html</a><br><a href="http://timnew.me/blog/2014/12/06/typical-eventbus-design-patterns/" target="_blank" rel="external">http://timnew.me/blog/2014/12/06/typical-eventbus-design-patterns/</a><br><a href="https://code.google.com/p/simpleeventbus/" target="_blank" rel="external">https://code.google.com/p/simpleeventbus/</a><br><a href="https://github.com/greenrobot/EventBus/blob/master/HOWTO.md" target="_blank" rel="external">https://github.com/greenrobot/EventBus/blob/master/HOWTO.md</a>  </p>
<h4 id="EventBus_u7684_u4F7F_u7528"><a href="#EventBus_u7684_u4F7F_u7528" class="headerlink" title="EventBus的使用"></a>EventBus的使用</h4><p><a href="http://www.cnblogs.com/peida/p/eventbus.html" target="_blank" rel="external">http://www.cnblogs.com/peida/p/eventbus.html</a><br><a href="http://blog.cainwong.com/using-an-eventbus-in-android-pt-1-why-an-eventbus/" target="_blank" rel="external">http://blog.cainwong.com/using-an-eventbus-in-android-pt-1-why-an-eventbus/</a><br><a href="http://blog.cainwong.com/using-an-eventbus-in-android-pt-2-sticking-your-config/" target="_blank" rel="external">http://blog.cainwong.com/using-an-eventbus-in-android-pt-2-sticking-your-config/</a><br><a href="http://blog.cainwong.com/using-an-eventbus-in-android-pt-3-threading/" target="_blank" rel="external">http://blog.cainwong.com/using-an-eventbus-in-android-pt-3-threading/</a>  </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9879_u76EE_u94FE_u63A5"><a href="#u9879_u76EE_u94FE_u63A5" class="headerlink" title="项目链接"></a>项目链接</h2><ul>
<li><a href="https://g]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="EventBus" scheme="http://blog.mcxiaoke.com/tags/EventBus/"/>
    
      <category term="HowTo" scheme="http://blog.mcxiaoke.com/tags/HowTo/"/>
    
      <category term="Java" scheme="http://blog.mcxiaoke.com/tags/Java/"/>
    
      <category term="Android, Java" scheme="http://blog.mcxiaoke.com/categories/Android-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python标准库笔记之datetime]]></title>
    <link href="http://blog.mcxiaoke.com/2015/07/15/python-module-date-time-notes/"/>
    <id>http://blog.mcxiaoke.com/2015/07/15/python-module-date-time-notes/</id>
    <published>2015-07-15T06:43:14.000Z</published>
    <updated>2015-07-15T06:45:27.000Z</updated>
    <content type="html"><![CDATA[<h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'mcxiaoke'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, timedelta, datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 常量 datetime.MINYEAR=1, datetime.MAXYEAR=9999</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">几个类方法</span><br><span class="line">datetime.date(year,month,day)</span><br><span class="line">datetime.time(hour,minute,second)</span><br><span class="line">datetime.datetime(year,month,day,hour,minute,second)</span><br><span class="line">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># date对象</span></span><br><span class="line"><span class="comment"># timedelta对象表示两个时间或日期的差值</span></span><br><span class="line">delta = timedelta(hours=-<span class="number">5</span>)</span><br><span class="line"><span class="comment"># out: datetime.timedelta(-1, 68400)</span></span><br><span class="line"><span class="keyword">print</span> delta.total_seconds()</span><br><span class="line"><span class="comment"># out: -18000.0</span></span><br><span class="line"><span class="keyword">print</span> date.today()  <span class="comment"># datetime.date(2015, 7, 4)</span></span><br><span class="line"><span class="keyword">print</span> date.fromtimestamp(time.time())  <span class="comment"># 2015-07-04</span></span><br><span class="line"></span><br><span class="line">today = date.today()</span><br><span class="line"><span class="keyword">print</span> today  <span class="comment"># 2015-07-04</span></span><br><span class="line">today == date.fromtimestamp(time.time())</span><br><span class="line"><span class="keyword">print</span> today  <span class="comment"># 2015-07-04</span></span><br><span class="line">birthday = date(today.year, <span class="number">10</span>, <span class="number">01</span>)</span><br><span class="line"><span class="keyword">print</span> birthday  <span class="comment"># 2015-10-01</span></span><br><span class="line">time_to_birthday = abs(birthday - today)</span><br><span class="line"><span class="keyword">print</span> time_to_birthday  <span class="comment"># 89 days, 0:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime对象，类方法</span></span><br><span class="line"><span class="comment"># 构造函数 datetime(year, month, day[, hour[, minute[, second[, microsecond[, tzinfo]]]]])</span></span><br><span class="line"><span class="comment"># 返回当地时间</span></span><br><span class="line">datetime.today()  <span class="comment"># datetime.datetime(2015, 7, 4, 16, 32, 29, 748628)</span></span><br><span class="line"><span class="comment"># 返回当地时间</span></span><br><span class="line">datetime.now()  <span class="comment"># datetime.datetime(2015, 7, 4, 16, 32, 53, 701843)</span></span><br><span class="line"><span class="comment"># 返回UTC时间</span></span><br><span class="line">datetime.utcnow()  <span class="comment"># datetime.datetime(2015, 7, 4, 8, 34, 14, 433219)</span></span><br><span class="line"><span class="comment"># 根据时间戳构建当地时间</span></span><br><span class="line">datetime.fromtimestamp(time.time())  <span class="comment"># datetime.datetime(2015, 7, 4, 16, 34, 53, 402597)</span></span><br><span class="line"><span class="comment"># 根据时间戳构建UTC时间</span></span><br><span class="line">datetime.utcfromtimestamp(time.time())  <span class="comment"># datetime.datetime(2015, 7, 4, 8, 35, 36, 268517)</span></span><br><span class="line"><span class="comment"># 根据格式和日期字符串构造对象，用法同time模块的strptime()</span></span><br><span class="line"><span class="comment"># datetime.strptime(date_string, format)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime对象，实例方法</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="keyword">print</span> now.date()  <span class="comment"># 2015-07-04</span></span><br><span class="line"><span class="keyword">print</span> now.time()  <span class="comment"># 16:45:29.077727</span></span><br><span class="line"><span class="keyword">print</span> now.utcoffset()  <span class="comment"># None</span></span><br><span class="line"><span class="keyword">print</span> now.timetuple()</span><br><span class="line"><span class="comment"># out: time.struct_time(tm_year=2015, tm_mon=7, tm_mday=4,</span></span><br><span class="line"><span class="comment"># tm_hour=16, tm_min=46, tm_sec=29, tm_wday=5, tm_yday=185, tm_isdst=-1)</span></span><br><span class="line"><span class="comment"># 类似的还有 now.utctimetuple()</span></span><br><span class="line"><span class="keyword">print</span> now.__str__()  <span class="comment"># 2015-07-04 16:48:02.930730</span></span><br><span class="line"><span class="keyword">print</span> now.ctime()  <span class="comment"># 'Sat Jul  4 16:44:03 2015'</span></span><br><span class="line"><span class="keyword">print</span> now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)  <span class="comment"># 2015-07-04 16:49:25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time对象</span></span><br><span class="line">t = now.time()</span><br><span class="line"><span class="keyword">print</span> t.isoformat()  <span class="comment"># 返回ISO8601格式 16:52:19.700394</span></span><br><span class="line"><span class="keyword">print</span> t.utcoffset()  <span class="comment"># 返回时区偏移 None</span></span><br></pre></td></tr></table></figure>
<h4 id="time"><a href="#time" class="headerlink" title="time"></a>time</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">__author__ = <span class="string">'mcxiaoke'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关模块 datetime,calendar, locale</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 时区缩写表示</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">GMT 格林威治标准时间 Greenwich Mean Time</span><br><span class="line">UTC 协调世界时 Coordinated Universal Time</span><br><span class="line">CST 可同时代表以下四个：</span><br><span class="line">Central Standard Time (USA) UT-6:00</span><br><span class="line">Central Standard Time (Australia) UT+9:30</span><br><span class="line">China Standard Time UT+8:00</span><br><span class="line">Cuba Standard Time UT-4:00</span><br><span class="line">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Unix时间起点是1970年1月1号0点，终点是2038年</span></span><br><span class="line">time.gmtime(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># out: time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0,</span></span><br><span class="line"><span class="comment"># tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0)</span></span><br><span class="line"><span class="comment"># UTC=GMT 两种叫法而已</span></span><br><span class="line"><span class="comment"># 返回当前的时间戳</span></span><br><span class="line">time.time()  <span class="comment"># out: 1435994390.769246</span></span><br><span class="line"><span class="comment"># 返回当前UTC/GMT时间，结果为 struct_time</span></span><br><span class="line">time.gmtime()</span><br><span class="line"><span class="comment"># out: time.struct_time(tm_year=2015, tm_mon=7, tm_mday=4, tm_hour=7,</span></span><br><span class="line"><span class="comment"># tm_min=20, tm_sec=35, tm_wday=5, tm_yday=185, tm_isdst=0)</span></span><br><span class="line"><span class="comment"># 返回当前时区的时间，结果为 struct_time</span></span><br><span class="line">time.localtime()</span><br><span class="line"><span class="comment"># out: time.struct_time(tm_year=2015, tm_mon=7, tm_mday=4, tm_hour=15,</span></span><br><span class="line"><span class="comment"># tm_min=21, tm_sec=30, tm_wday=5, tm_yday=185, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line">time.mktime(time.localtime())  <span class="comment"># 转换成时间戳</span></span><br><span class="line">time.asctime(time.localtime())  <span class="comment"># 转换成字符串</span></span><br><span class="line"><span class="comment"># out: 'Sat Jul  4 15:24:18 2015'</span></span><br><span class="line">time.asctime()  <span class="comment"># 默认使用 localtime()</span></span><br><span class="line">time.ctime()  <span class="comment"># 字符串表示的当地时间</span></span><br><span class="line"><span class="comment"># ctime(secs) = asctime(localtime(secs))</span></span><br><span class="line"><span class="comment"># ctime.sleep(seconds)  # 挂起当前线程一段时间，单位为秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间字符串格式化</span></span><br><span class="line"><span class="comment"># time.strftime(format[,t]) 格式化struct_time，默认是当前时间</span></span><br><span class="line"><span class="comment"># 转换成unicode编码 strftime(&lt;myformat&gt;).decode(locale.getlocale()</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"当前时间戳"</span>, time.time()</span><br><span class="line">time_text = time.strftime(</span><br><span class="line">    <span class="string">'%%A    (%A)    #当地星期几缩写\n '</span></span><br><span class="line">    <span class="string">'%%a    (%a)    #当地星期几全称\n '</span></span><br><span class="line">    <span class="string">'%%B    (%B)    #当地月份全称\n '</span></span><br><span class="line">    <span class="string">'%%b    (%b)    #当地月份缩写\n '</span></span><br><span class="line">    <span class="string">'%%c    (%c)    #当地日期和时间表示\n '</span></span><br><span class="line">    <span class="string">'%%d    (%d)    #代表日期天数的数字[01,31]\n '</span></span><br><span class="line">    <span class="string">'%%H    (%H)    #24小时制的小时数[00,23]\n '</span></span><br><span class="line">    <span class="string">'%%I    (%I)    #12小时制的小时数[01,12]\n '</span></span><br><span class="line">    <span class="string">'%%j    (%j)    #一年中的第几天[001,366]\n '</span></span><br><span class="line">    <span class="string">'%%m    (%m)    #代表日期月份的数字[01,12]\n '</span></span><br><span class="line">    <span class="string">'%%M    (%M)    #代表时间分钟的数字[00,59]\n '</span></span><br><span class="line">    <span class="string">'%%p    (%p)    #当地表示上午/下午的缩写，如AM/PM\n '</span></span><br><span class="line">    <span class="string">'%%S    (%S)    #代表时间秒数的数字[00,61]\n '</span></span><br><span class="line">    <span class="string">'%%U    (%U)    #一年中的第几周[00,53](星期日作为一周的开始)\n '</span></span><br><span class="line">    <span class="string">'%%w    (%w)    #代表日期星期几的数字[0(星期一),6]\n '</span></span><br><span class="line">    <span class="string">'%%W    (%W)    #一年中的第几周[00,53](星期一作为一周的开始)\n '</span></span><br><span class="line">    <span class="string">'%%x    (%x)    #当地的日期表示\n '</span></span><br><span class="line">    <span class="string">'%%X    (%X)    #当地的时间表示\n '</span></span><br><span class="line">    <span class="string">'%%y    (%y)    #二位数的年份表示\n '</span></span><br><span class="line">    <span class="string">'%%Y    (%Y)    #四位数的年份表示\n '</span></span><br><span class="line">    <span class="string">'%%Z    (%Z)    #当前时区表示\n '</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"当前时间结构"</span>, time.localtime()</span><br><span class="line"><span class="keyword">print</span> <span class="string">"时间格式举例"</span>, time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="keyword">print</span> time_text</span><br><span class="line"><span class="comment"># 输出的表示</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">当前时间戳 1435997058.36</span><br><span class="line">当前时间结构 time.struct_time(tm_year=2015, tm_mon=7, tm_mday=4,</span><br><span class="line">tm_hour=16, tm_min=4, tm_sec=18, tm_wday=5, tm_yday=185, tm_isdst=0)</span><br><span class="line">时间格式举例 2015-07-04 16:04:18</span><br><span class="line">%A    (Saturday)    #当地星期几缩写</span><br><span class="line"> %a    (Sat)    #当地星期几全称</span><br><span class="line"> %B    (July)    #当地月份全称</span><br><span class="line"> %b    (Jul)    #当地月份缩写</span><br><span class="line"> %c    (Sat Jul  4 16:04:18 2015)    #当地日期和时间表示</span><br><span class="line"> %d    (04)    #代表日期天数的数字[01,31]</span><br><span class="line"> %H    (16)    #24小时制的小时数[00,23]</span><br><span class="line"> %I    (04)    #12小时制的小时数[01,12]</span><br><span class="line"> %j    (185)    #一年中的第几天[001,366]</span><br><span class="line"> %m    (07)    #代表日期月份的数字[01,12]</span><br><span class="line"> %M    (04)    #代表时间分钟的数字[00,59]</span><br><span class="line"> %p    (PM)    #当地表示上午/下午的缩写，如AM/PM</span><br><span class="line"> %S    (18)    #代表时间秒数的数字[00,61]</span><br><span class="line"> %U    (26)    #一年中的第几周[00,53](星期日作为一周的开始)</span><br><span class="line"> %w    (6)    #代表日期星期几的数字[0(星期一),6]</span><br><span class="line"> %W    (26)    #一年中的第几周[00,53](星期一作为一周的开始)</span><br><span class="line"> %x    (07/04/15)    #当地的日期表示</span><br><span class="line"> %X    (16:04:18)    #当地的时间表示</span><br><span class="line"> %y    (15)    #二位数的年份表示</span><br><span class="line"> %Y    (2015)    #四位数的年份表示</span><br><span class="line"> %Z    (CST)    #当前时区表示</span><br><span class="line">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按格式解析时间，返回值为 struct_time</span></span><br><span class="line">time.strptime(<span class="string">'2005-09-01 9:45:20'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="comment"># out: time.struct_time(tm_year=2005, tm_mon=9, tm_mday=1,</span></span><br><span class="line"><span class="comment"># tm_hour=9, tm_min=45, tm_sec=20, tm_wday=3, tm_yday=244, tm_isdst=-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># struct_time结构说明</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">0   tm_year (for example, 1993)</span><br><span class="line">1   tm_mon  取值范围 [1, 12]</span><br><span class="line">2   tm_mday 取值范围 [1, 31]</span><br><span class="line">3   tm_hour 取值范围 [0, 23]</span><br><span class="line">4   tm_min  取值范围 [0, 59]</span><br><span class="line">5   tm_sec  取值范围 [0, 61]</span><br><span class="line">6   tm_wday 取值范围 [0, 6] # 星期一=0</span><br><span class="line">7   tm_yday 取值范围 [1, 366]</span><br><span class="line">8   tm_isdst 取值范围 0, 1 or -1</span><br><span class="line">'''</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><figure class="highlight python"><table><tr><td c]]>
    </summary>
    
      <category term="Python,datetime" scheme="http://blog.mcxiaoke.com/tags/Python-datetime/"/>
    
      <category term="Python" scheme="http://blog.mcxiaoke.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python标准库笔记之string]]></title>
    <link href="http://blog.mcxiaoke.com/2015/07/15/python-module-string-notes/"/>
    <id>http://blog.mcxiaoke.com/2015/07/15/python-module-string-notes/</id>
    <published>2015-07-15T06:40:14.000Z</published>
    <updated>2015-07-15T06:45:57.000Z</updated>
    <content type="html"><![CDATA[<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># Created by mcxiaoke on 15/7/4 17:01.</span></span><br><span class="line">__author__ = <span class="string">'mcxiaoke'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些常量</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">whitespace = ' \t\n\r\v\f'</span><br><span class="line">lowercase = 'abcdefghijklmnopqrstuvwxyz'</span><br><span class="line">uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span><br><span class="line">letters = lowercase + uppercase</span><br><span class="line">ascii_lowercase = lowercase</span><br><span class="line">ascii_uppercase = uppercase</span><br><span class="line">ascii_letters = ascii_lowercase + ascii_uppercase</span><br><span class="line">digits = '0123456789'</span><br><span class="line">hexdigits = digits + 'abcdef' + 'ABCDEF'</span><br><span class="line">octdigits = '01234567'</span><br><span class="line">punctuation = """!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~"""</span><br><span class="line">printable = digits + letters + punctuation + whitespace</span><br><span class="line">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串格式化</span></span><br><span class="line"><span class="comment"># 字符串格式化格式为 "hello, world &#123;0&#125; &#123;1&#125;"</span></span><br><span class="line"><span class="comment"># 默认调用 __format()__方法，可以显示使用str()或repr()</span></span><br><span class="line"><span class="comment"># "Harold's a clever &#123;0!s&#125;"        # Calls str() on the argument first</span></span><br><span class="line"><span class="comment"># "Bring out the holy &#123;name!r&#125;"    # Calls repr() on the argument first</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"hello, world &#123;0&#125; &#123;1&#125; !"</span>.format(<span class="string">'first'</span>, <span class="string">'second'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串格式 %s</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Welcome to %s"</span> % <span class="string">"China"</span></span><br><span class="line"><span class="comment"># 命名参数</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'I love %(cat)s and %(dog)s.'</span> % &#123;<span class="string">'cat'</span>: <span class="string">'BadCat'</span>, <span class="string">'dog'</span>: <span class="string">'BadDog'</span>&#125;</span><br><span class="line"><span class="comment"># out:I love BadCat and BadDog.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 整数格式</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">'b' 二进制整数</span><br><span class="line">'c' Unicode字符</span><br><span class="line">'d' 十进制整数</span><br><span class="line">'o' 八进制整数</span><br><span class="line">'x' 十六进制，小写</span><br><span class="line">'X' 十六进制，大写</span><br><span class="line">'n' 十进制，带分隔符</span><br><span class="line">'''</span></span><br><span class="line">num = <span class="number">1234567890</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"十进制:%d 八进制:%o 十六进制:0x%x 十六进制:0X%X"</span> % (num, num, num, num)</span><br><span class="line"><span class="comment"># out: 十进制:1234567890 八进制:11145401322 十六进制:0x499602d2 十六进制:0X499602D2</span></span><br><span class="line"><span class="comment"># 浮点数格式</span></span><br><span class="line">fnum = <span class="number">987123456.78901234567890123</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%e'</span> % fnum, <span class="string">'%E'</span> % fnum, <span class="string">'%f'</span> % fnum, <span class="string">'%F'</span> % fnum, <span class="string">'%g'</span> % fnum, <span class="string">'%G'</span> % fnum</span><br><span class="line"><span class="comment"># out: 9.871235e+08 9.871235E+08 987123456.789012 987123456.789012 9.87123e+08 9.87123E+08</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化例子</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;0&#125;, &#123;1&#125;, &#123;2&#125;'</span>.format(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)  <span class="comment"># a, b, c</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;&#125;, &#123;&#125;, &#123;&#125;'</span>.format(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)  <span class="comment"># a, b, c</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;2&#125;, &#123;1&#125;, &#123;0&#125;'</span>.format(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>)  <span class="comment"># c, b, a</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;2&#125;, &#123;1&#125;, &#123;0&#125;'</span>.format(*<span class="string">'abc'</span>)  <span class="comment"># 参数解包</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;0&#125;&#123;1&#125;&#123;0&#125;'</span>.format(<span class="string">'hello-'</span>, <span class="string">'world-'</span>)  <span class="comment"># 参数可以重复使用</span></span><br><span class="line"><span class="comment"># out: hello-world-hello-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命名参数例子 # out: 经纬度: (37.24N, -115.81W)</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'经纬度: (&#123;0&#125;, &#123;1&#125;)'</span>.format(<span class="string">'37.24N'</span>, <span class="string">'-115.81W'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'A 经纬度: (&#123;latitude&#125;, &#123;longitude&#125;)'</span>.format(latitude=<span class="string">'37.24N'</span>, longitude=<span class="string">'-115.81W'</span>)</span><br><span class="line">args = (<span class="string">'37.24N'</span>, <span class="string">'-115.81W'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'B 经纬度: (&#123;&#125;, &#123;&#125;)'</span>.format(*args)</span><br><span class="line">kwargs = &#123;<span class="string">'latitude'</span>: <span class="string">'37.24N'</span>, <span class="string">'longitude'</span>: <span class="string">'-115.81W'</span>&#125;</span><br><span class="line"><span class="keyword">print</span> <span class="string">'C 经纬度: (&#123;latitude&#125;, &#123;longitude&#125;)'</span>.format(**kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义对象例子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x, self.y = x, y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Point(&#123;self.x&#125;,&#123;self.y&#125;)"</span>.format(self=self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(x=&#123;self.x&#125;,y=&#123;self.y&#125;)"</span>.format(self=self)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pt = Point(<span class="number">15</span>, <span class="number">238</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Point is &#123;&#125;'</span>.format(pt)  <span class="comment"># Point is Point(15,238)</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Point(x=&#123;0.x&#125;, y=&#123;0.y&#125;)'</span>.format(pt)  <span class="comment"># Point(x=15, y=238)</span></span><br><span class="line">two = (<span class="string">'hello'</span>, <span class="string">'world'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'A=&#123;0[0]&#125;, B=&#123;0[1]&#125;'</span>.format(two)  <span class="comment"># A=hello, B=world</span></span><br><span class="line"><span class="comment"># 使用 repr()和str()的示例</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"repr() shows quotes: &#123;!r&#125;; str() doesn't: &#123;!s&#125;"</span>.format(<span class="string">'test1'</span>, <span class="string">'test2'</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Point is &#123;0!r&#125; &#123;0!s&#125;'</span>.format(pt)  <span class="comment"># Point is (x=15,y=238) Point(15,238)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对其方式</span></span><br><span class="line"><span class="comment"># 星号用于加强显示效果，默认是空白</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;:*&lt;30&#125;'</span>.format(<span class="string">'左对齐'</span>)  <span class="comment"># 左对齐*********************</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;:*&gt;30&#125;'</span>.format(<span class="string">'右对齐'</span>)  <span class="comment"># *********************右对齐</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;:*^30&#125;'</span>.format(<span class="string">'居中对其'</span>)  <span class="comment"># *********居中对其*********</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数字格式处理</span></span><br><span class="line"><span class="comment"># 不带前缀</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;;  bin: &#123;0:b&#125;"</span>.format(<span class="number">2015</span>)</span><br><span class="line"><span class="comment"># out: int: 2015;  hex: 7df;  oct: 3737;  bin: 11111011111</span></span><br><span class="line"><span class="comment"># 带前缀</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;"</span>.format(<span class="number">2015</span>)</span><br><span class="line"><span class="comment"># int: 2015;  hex: 0x7df;  oct: 0o3737;  bin: 0b11111011111</span></span><br><span class="line"><span class="comment"># 添加分隔符</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;:,&#125;'</span>.format(<span class="number">1234567890</span>)  <span class="comment"># 1,234,567,890</span></span><br><span class="line"><span class="comment"># 日期时间格式化</span></span><br><span class="line">d = datetime.datetime.now()</span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;:%Y-%m-%d %H:%M:%S&#125;'</span>.format(d)  <span class="comment"># 2015-07-04 18:34:28</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串模板</span></span><br><span class="line">s = Template(<span class="string">'$who likes to eat $what'</span>)</span><br><span class="line"><span class="keyword">print</span> s.substitute(who=<span class="string">'john'</span>, what=<span class="string">'fish'</span>)  <span class="comment"># john likes to eat fish</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串函数</span></span><br><span class="line">s = <span class="string">'this is some sample text.'</span></span><br><span class="line"><span class="comment"># 首字母大写</span></span><br><span class="line"><span class="keyword">print</span> string.capitalize(s)  <span class="comment"># This is some sample text.</span></span><br><span class="line"><span class="comment"># 结果等于 s.capitalize()</span></span><br><span class="line"><span class="comment"># 查找字符串</span></span><br><span class="line"><span class="keyword">print</span> s.find(<span class="string">'is'</span>)  <span class="comment"># 2</span></span><br><span class="line"><span class="keyword">print</span> s.find(<span class="string">'hello'</span>)  <span class="comment"># -1</span></span><br><span class="line"><span class="comment"># 分割字符串</span></span><br><span class="line"><span class="keyword">print</span> s.split(<span class="string">' '</span>)  <span class="comment"># ['this', 'is', 'some', 'sample', 'text.']</span></span><br><span class="line"><span class="keyword">print</span> s.split(<span class="string">' '</span>, <span class="number">1</span>)  <span class="comment"># ['this', 'is some sample text.']</span></span><br><span class="line"><span class="keyword">print</span> s.rsplit(<span class="string">' '</span>, <span class="number">1</span>)  <span class="comment"># ['this is some sample', 'text.']</span></span><br><span class="line"><span class="comment"># 合并字符串</span></span><br><span class="line"><span class="keyword">print</span> s.join([<span class="string">'A_'</span>, <span class="string">'B'</span>])  <span class="comment"># A_this is some sample text.B</span></span><br><span class="line"><span class="keyword">print</span> string.join([<span class="string">'there'</span>, <span class="string">'are'</span>, <span class="string">'joined'</span>, <span class="string">'words'</span>], <span class="string">' '</span>)  <span class="comment"># there are joined words</span></span><br><span class="line">s2 = <span class="string">'this\tis\tsome\tsample\ttext'</span></span><br><span class="line"><span class="comment"># 展开TAB</span></span><br><span class="line"><span class="keyword">print</span> s2.expandtabs(<span class="number">4</span>)  <span class="comment"># this    is  some    sample  text</span></span><br><span class="line">s3 = <span class="string">'     hello,     python!    '</span></span><br><span class="line"><span class="comment"># 检查结尾</span></span><br><span class="line"><span class="keyword">print</span> s.endswith(<span class="string">'hello'</span>)  <span class="comment"># out:False</span></span><br><span class="line"><span class="comment"># 去除前后空白</span></span><br><span class="line"><span class="keyword">print</span> s3.strip()  <span class="comment"># hello,     python!</span></span><br><span class="line">s4 = <span class="string">'THIS is SOME text.'</span></span><br><span class="line"><span class="comment"># 交换大小写</span></span><br><span class="line"><span class="keyword">print</span> s4.swapcase()  <span class="comment"># this IS some TEXT.</span></span><br><span class="line"><span class="comment"># 首字母大写</span></span><br><span class="line"><span class="keyword">print</span> s4.capitalize()  <span class="comment"># This is some text.</span></span><br><span class="line"><span class="comment"># 标题模式，单词首字母大写</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'title:'</span>, s4.title()  <span class="comment"># This Is Some Text.</span></span><br><span class="line"><span class="comment"># 全部小写</span></span><br><span class="line"><span class="keyword">print</span> s4.lower()  <span class="comment"># this is some text.</span></span><br><span class="line"><span class="comment"># 全部大写</span></span><br><span class="line"><span class="keyword">print</span> s4.upper()  <span class="comment"># THIS IS SOME TEXT.</span></span><br><span class="line"><span class="comment"># 全是字母和数字</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'12345678abcdefg'</span>.isalnum()  <span class="comment"># out:True</span></span><br><span class="line"><span class="comment"># 全是数字</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'12345'</span>.isdigit()  <span class="comment"># out:True</span></span><br><span class="line"><span class="comment"># 全是字母</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'12345, hello'</span>.isalpha()  <span class="comment"># out:False</span></span><br><span class="line"><span class="comment"># 删除指定字符</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'hello,world,I love cats'</span>.translate(<span class="keyword">None</span>, <span class="string">'o'</span>)  <span class="comment"># out:hell,wrld,I lve cats</span></span><br><span class="line"><span class="comment"># 补齐字符串</span></span><br><span class="line"><span class="keyword">print</span> s4.ljust(<span class="number">30</span>, <span class="string">'_'</span>)  <span class="comment"># THIS is SOME text.____________</span></span><br><span class="line"><span class="keyword">print</span> s4.rjust(<span class="number">30</span>, <span class="string">'_'</span>)  <span class="comment"># ____________THIS is SOME text.</span></span><br><span class="line"><span class="keyword">print</span> s4.center(<span class="number">30</span>, <span class="string">'_'</span>)  <span class="comment"># ______THIS is SOME text.______</span></span><br><span class="line"><span class="keyword">print</span> s4.zfill(<span class="number">30</span>)  <span class="comment"># 000000000000THIS is SOME text.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换字符串</span></span><br><span class="line">s5 = <span class="string">'color1 and color2 and color3 scheme files are tested.'</span></span><br><span class="line"><span class="keyword">print</span> s5.replace(<span class="string">'color'</span>, <span class="string">'dark'</span>)</span><br><span class="line"><span class="comment"># out: dark1 and dark2 and dark3 scheme files are tested.</span></span><br><span class="line"><span class="keyword">print</span> s5.replace(<span class="string">'and'</span>, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># out: color1  color2  color3 scheme files are tested.</span></span><br><span class="line"><span class="keyword">print</span> s5.replace(<span class="string">' '</span>, <span class="string">'_'</span>)</span><br><span class="line"><span class="comment"># out: color1_and_color2_and_color3_scheme_files_are_tested.</span></span><br><span class="line"><span class="keyword">print</span> s5.replace(<span class="string">' '</span>, <span class="string">'-'</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># out: color1-and-color2 and color3 scheme files are tested.</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight python"><table><tr><td class="gu]]>
    </summary>
    
      <category term="Python" scheme="http://blog.mcxiaoke.com/tags/Python/"/>
    
      <category term="Python" scheme="http://blog.mcxiaoke.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[根据EXIF拍摄时间批量重命名照片]]></title>
    <link href="http://blog.mcxiaoke.com/2015/07/15/python-image-exif-rename/"/>
    <id>http://blog.mcxiaoke.com/2015/07/15/python-image-exif-rename/</id>
    <published>2015-07-15T06:27:58.000Z</published>
    <updated>2015-07-24T09:43:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u6839_u636EEXIF_u62CD_u6444_u65F6_u95F4_u6279_u91CF_u91CD_u547D_u540D_u7167_u7247"><a href="#u6839_u636EEXIF_u62CD_u6444_u65F6_u95F4_u6279_u91CF_u91CD_u547D_u540D_u7167_u7247" class="headerlink" title="根据EXIF拍摄时间批量重命名照片"></a>根据EXIF拍摄时间批量重命名照片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author: mcxiaoke</span></span><br><span class="line"><span class="comment"># @Date:   2015-07-10 08:24:23</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> exifread</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">TAGS = [</span><br><span class="line">    <span class="string">'GPS GPSLatitude'</span>,</span><br><span class="line">    <span class="string">'GPS GPSLongitude'</span>,</span><br><span class="line">    <span class="string">'GPS GPSDate'</span>,</span><br><span class="line">    <span class="string">'GPS GPSImgDirection'</span>,</span><br><span class="line">    <span class="string">'Image DateTime'</span>,</span><br><span class="line">    <span class="string">'Image Orientation'</span>,</span><br><span class="line">    <span class="string">'Image Software'</span>,</span><br><span class="line">    <span class="string">'Image Model'</span>,</span><br><span class="line">    <span class="string">'Image Make'</span>,</span><br><span class="line">    <span class="string">'Image XResolution'</span>,</span><br><span class="line">    <span class="string">'Image YResolution'</span>,</span><br><span class="line">    <span class="string">'EXIF ExifVersion'</span>,</span><br><span class="line">    <span class="string">'EXIF ExifImageLength'</span>,</span><br><span class="line">    <span class="string">'EXIF ExifImageWidth'</span>,</span><br><span class="line">    <span class="string">'EXIF LensMake'</span>,</span><br><span class="line">    <span class="string">'EXIF LensModel'</span>,</span><br><span class="line">    <span class="string">'EXIF FocalLength'</span>,</span><br><span class="line">    <span class="string">'EXIF WhiteBalance'</span>,</span><br><span class="line">    <span class="string">'EXIF ISOSpeedRatings'</span>,</span><br><span class="line">    <span class="string">'EXIF ExposureMode'</span>,</span><br><span class="line">    <span class="string">'EXIF ExposureTime'</span>,</span><br><span class="line">    <span class="string">'EXIF ExposureProgram'</span>,</span><br><span class="line">    <span class="string">'EXIF DateTimeOriginal'</span>,</span><br><span class="line">    <span class="string">'EXIF DateTimeDigitized'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">NAME_TAGS = [</span><br><span class="line">    <span class="string">'GPS GPSDate'</span>,</span><br><span class="line">    <span class="string">'Image DateTime'</span>,</span><br><span class="line">    <span class="string">'Image Model'</span>,</span><br><span class="line">    <span class="string">'Image XResolution'</span>,</span><br><span class="line">    <span class="string">'Image YResolution'</span>,</span><br><span class="line">    <span class="string">'EXIF ExifImageLength'</span>,</span><br><span class="line">    <span class="string">'EXIF ExifImageWidth'</span>,</span><br><span class="line">    <span class="string">'EXIF ISOSpeedRatings'</span>,</span><br><span class="line">    <span class="string">'EXIF DateTimeOriginal'</span>,</span><br><span class="line">    <span class="string">'EXIF DateTimeDigitized'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">EXIF_DATE_TIME = <span class="string">'%Y:%m:%d %H:%M:%S'</span></span><br><span class="line">NAME_DATE_TIME = <span class="string">'IMG_%Y%m%d_%H%M%S'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImageInfo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path, width, height, time=None, iso=<span class="number">0</span>, model=None)</span>:</span></span><br><span class="line">        self.path = path</span><br><span class="line">        self.width = width</span><br><span class="line">        self.height = height</span><br><span class="line">        self.time = time</span><br><span class="line">        self.iso = iso</span><br><span class="line">        self.model = model</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        time_str = datetime.strftime(</span><br><span class="line">            self.time, EXIF_DATE_TIME) <span class="keyword">if</span> self.time <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Image&#123;path=%s,width=%s,height=%s,time=%s,iso=%s,model=%s&#125;'</span> % (</span><br><span class="line">            self.path, self.width, self.height,</span><br><span class="line">            time_str, self.iso, self.model)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Usage: python %s some_directory'</span> % sys.argv[<span class="number">0</span>]</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">top = unicode(path.normcase(sys.argv[<span class="number">1</span>]))</span><br><span class="line">log = codecs.open(path.join(top, <span class="string">'log.txt'</span>), <span class="string">'w'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(top):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">        _, ext = path.splitext(name)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ext <span class="keyword">or</span> ext.lower() <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'.jpg'</span>, <span class="string">'.png'</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        rel_path = path.join(root, name)</span><br><span class="line">        src_path = path.abspath(rel_path)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"process file:"</span>, src_path</span><br><span class="line">        f = open(path.join(root, name), <span class="string">'rb'</span>)</span><br><span class="line">        tags = exifread.process_file(f)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tags:</span><br><span class="line">            log.write(<span class="string">'No exif tags found for: %s\n'</span> % rel_path)</span><br><span class="line">        <span class="string">'''</span><br><span class="line">        img_path = src_path</span><br><span class="line">        width_str = str(tags.get('EXIF ExifImageWidth'))</span><br><span class="line">        height_str = str(tags.get('EXIF ExifImageLength'))</span><br><span class="line">        img_w = int(width_str) if width_str and width_str.isdigit() else 0</span><br><span class="line">        img_h = int(height_str) if height_str and height_str.isdigit() else 0</span><br><span class="line">        time_str = str(tags.get('Image DateTime'))</span><br><span class="line">        img_time = datetime.strptime(</span><br><span class="line">            time_str, EXIF_DATE_TIME) if time_str else None</span><br><span class="line">        iso_str = str(tags.get('EXIF ISOSpeedRatings'))</span><br><span class="line">        print 'iso_str=%s' % iso_str</span><br><span class="line">        img_iso = int(iso_str) if iso_str and iso_str.isdigit() else 0</span><br><span class="line">        img_model = str(tags.get('Image Model'))</span><br><span class="line">        img = ImageInfo(img_path, img_w, img_h, time=img_time,</span><br><span class="line">                        iso=img_iso, model=img_model)</span><br><span class="line">        '''</span></span><br><span class="line">        time_str = str(tags.get(<span class="string">'Image DateTime'</span>)) <span class="keyword">if</span> tags <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">        img_time = datetime.strptime(</span><br><span class="line">            time_str, EXIF_DATE_TIME) <span class="keyword">if</span> time_str <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> img_time:</span><br><span class="line">            os.stat(src_path)</span><br><span class="line">            img_time = datetime.fromtimestamp(os.stat(src_path).st_mtime)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'no exif, using last modified time for %s'</span> % name</span><br><span class="line">            log.write(<span class="string">'using stat modify time for %s\n'</span> % name)</span><br><span class="line">        dst_path = path.join(</span><br><span class="line">            root, datetime.strftime(img_time, NAME_DATE_TIME)+ext.lower())</span><br><span class="line">        <span class="keyword">if</span> path.exists(dst_path):</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'dst file exists, no need to rename, skip %s'</span> % name</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        os.rename(src_path, dst_path)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'renamed to'</span>, dst_path</span><br><span class="line">        log.flush()</span><br><span class="line"></span><br><span class="line">log.close()</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6839_u636EEXIF_u62CD_u6444_u65F6_u95F4_u6279_u91CF_u91CD_u547D_u540D_u7167_u7247"><a href="#u6839_u636EEXIF_u62CD_u6444_u65F6_u95F4]]>
    </summary>
    
      <category term="Python" scheme="http://blog.mcxiaoke.com/tags/Python/"/>
    
      <category term="Script" scheme="http://blog.mcxiaoke.com/tags/Script/"/>
    
      <category term="Python" scheme="http://blog.mcxiaoke.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发杂记（三）]]></title>
    <link href="http://blog.mcxiaoke.com/2014/06/30/android-dev-notes-03/"/>
    <id>http://blog.mcxiaoke.com/2014/06/30/android-dev-notes-03/</id>
    <published>2014-06-30T06:00:00.000Z</published>
    <updated>2015-07-07T09:47:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是另一部分的Android开发笔记整理</p>
<p>###如何完全不显示一个Activity的UI<br>可以使用 <code>android:theme=&quot;@android:style/Theme.NoDisplay&quot;</code> 但是有一个注意事项，见<br><a href="http://stackoverflow.com/questions/4551868/how-to-completely-get-rid-of-an-activitys-gui-avoid-a-black-screen" target="_blank" rel="external">how to completely get rid of an activity’s GUI</a></p>
<p>###如何移除ActionBar底部的阴影<br>自定义ActionBar的Style，使用 <code>&lt;item name=&quot;android:windowContentOverlay&quot;&gt;@null&lt;/item&gt;</code> 如果是使用ActionBarSherlock或ActionBarCompat，还需要添加 <code>&lt;item name=&quot;windowContentOverlay&quot;&gt;@null&lt;/item&gt;</code>，参考：<a href="http://stackoverflow.com/questions/11448679/how-can-i-have-a-drop-shadow-on-my-actionbar-actionbarsherlock" target="_blank" rel="external">How can I have a drop shadow on my ActionBar</a></p>
<p>###使用Gradle时私密存储签名密钥<br>参考这个Gist：<a href="https://gist.github.com/mcxiaoke/8450376" target="_blank" rel="external">build.gradle</a></p>
<p>###透明的Activity退出后，没有真正finish的问题<br>具体见 <a href="http://blog.sina.com.cn/s/blog_601cbd070100npf8.html" target="_blank" rel="external">这里的分析</a><br>android:windowShowWallpaper = true的作用，这并不是在后面显示桌面，是配置Activity的背景为桌面背景</p>
<p>###Background和Seletor必须使用真实的Drawable</p>
<p>否则，有些三星和摩托的机子上会没有背景，显示纯黑色，定义在colors.xml里的伪drawble不行</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">color</span> <span class="attribute">name</span>=<span class="value">"mail_published_time_color"</span>&gt;</span>#bcbcbc<span class="tag">&lt;/<span class="title">color</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">drawable</span> <span class="attribute">name</span>=<span class="value">"ab_bg_black"</span>&gt;</span>#aa191919<span class="tag">&lt;/<span class="title">drawable</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>必须是真实的图片drawable或者定义好的shape</p>
<p>###合并多个git仓库，保留commit记录的方法<br>详情见<a href="http://stackoverflow.com/questions/1683531/how-to-import-existing-git-repository-into-another" target="_blank" rel="external">How to import existing GIT repository into another</a>和<a href="https://github.com/deercoder/Linux/blob/master/Git/git_merge_local_repos.md" target="_blank" rel="external">合并已存在的git仓库</a></p>
<p>###WebView浏览位置的保存和恢复</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">savePosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LogUtils.v(TAG, <span class="string">"savePosition()"</span>);</span><br><span class="line">    <span class="keyword">float</span> top = getTop();</span><br><span class="line">    <span class="keyword">float</span> contentHeight = getContentHeight();</span><br><span class="line">    <span class="keyword">float</span> scrollY = getScrollY();</span><br><span class="line">    mSavedPosition = (scrollY - top) / contentHeight;</span><br><span class="line">    <span class="keyword">return</span> mSavedPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">restorePosition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LogUtils.v(TAG, <span class="string">"restorePosition()"</span>);</span><br><span class="line">    <span class="keyword">if</span> (mSavedPosition &gt; <span class="number">0f</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> top = getTop();</span><br><span class="line">        <span class="keyword">float</span> contentHeight = getContentHeight();</span><br><span class="line">        <span class="keyword">float</span> height = contentHeight - top;</span><br><span class="line">        <span class="keyword">float</span> positionInViewPort = height * mSavedPosition;</span><br><span class="line">        <span class="keyword">int</span> positionY = Math.round(top + positionInViewPort);</span><br><span class="line">        scrollTo(<span class="number">0</span>, positionY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSavedPosition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###使用拨号键盘的SecretCode功能</p>
<p>Android的拨号键盘有一些特殊的定义键，可以启动自定义的Intent，用法：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">receiver</span> <span class="attribute">android:name</span>=<span class="value">".receiver.DiagnoserReceiver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.provider.Telephony.SECRET_CODE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:scheme</span>=<span class="value">"android_secret_code"</span> <span class="attribute">android:host</span>=<span class="value">"111222"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>参考资料：<br><a href="http://udinic.wordpress.com/2013/05/17/create-a-secret-doorway-to-your-app/" target="_blank" rel="external">Create a secret doorway to your app</a><br><a href="https://code.google.com/p/android-roms/wiki/Secret_Star_Codes" target="_blank" rel="external">Secret_Star_Codes</a></p>
<p>###阻止点击DrawLayout时事件传递到下一层<br>方法是给Drawlayout添加一个OnClickListener<br>参考资料：<br><a href="http://stackoverflow.com/questions/18811973/android-how-do-i-keep-drawerlayout-from-passing-touch-events-to-the-underlying" target="_blank" rel="external">How do I keep DrawerLayout from passing touch events to the underlying view</a></p>
<p>###没有root的情况下如何adb pull /data/data/package/下的数据<br>下面是一个查看应用数据库的例子脚本：</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE_NAME=com.your.<span class="keyword">package</span></span><br><span class="line">DB_NAME=data.db</span><br><span class="line">rm -rf <span class="variable">$&#123;DB_NAME&#125;</span></span><br><span class="line">adb shell <span class="string">"run-as <span class="subst">$&#123;PACKAGE_NAME&#125;</span> chmod 666 /data/data/<span class="subst">$&#123;PACKAGE_NAME&#125;</span>/databases/<span class="subst">$&#123;DB_NAME&#125;</span>"</span></span><br><span class="line">adb pull /data/data/<span class="variable">$&#123;PACKAGE_NAME&#125;</span>/databases/<span class="variable">$&#123;DB_NAME&#125;</span> /tmp/</span><br><span class="line">adb shell <span class="string">"run-as <span class="subst">$&#123;PACKAGE_NAME&#125;</span> chmod 600 /data/data/<span class="subst">$&#123;PACKAGE_NAME&#125;</span>/databases/<span class="subst">$&#123;DB_NAME&#125;</span>"</span></span><br><span class="line">sqlite3 /tmp/$&#123;DB_NAME</span><br></pre></td></tr></table></figure>
<p>分析见：<br> <a href="http://stackoverflow.com/questions/18471780/android-adb-retrieve-database-using-run-as" target="_blank" rel="external">android adb, retrieve database using run-as</a><br><a href="http://blog.shvetsov.com/2013/02/access-android-app-data-without-root.html" target="_blank" rel="external">Access Android app data without root</a></p>
<p>###快速获取电池电量的方法</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Intent getBatteryStatus(Context context) &#123;</span><br><span class="line">    Context appContext = context.getApplicationContext();</span><br><span class="line">    <span class="keyword">return</span> appContext.registerReceiver(<span class="keyword">null</span>,</span><br><span class="line">            <span class="keyword">new</span> IntentFilter(Intent.ACTION_BATTERY_CHANGED));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">String</span> getBatteryInfo(Context context, Intent batteryIntent) &#123;</span><br><span class="line">    <span class="built_in">int</span> status = batteryIntent.getIntExtra(BatteryManager.EXTRA_STATUS, -<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">boolean</span> isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||</span><br><span class="line">            status == BatteryManager.BATTERY_STATUS_FULL;</span><br><span class="line">    <span class="built_in">int</span> chargePlug = batteryIntent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">boolean</span> usbCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_USB;</span><br><span class="line">    <span class="built_in">boolean</span> acCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_AC;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> level = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, -<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">scale</span> = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> batteryPct = level / (<span class="built_in">float</span>) <span class="built_in">scale</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Battery Info: isCharging="</span> + isCharging</span><br><span class="line">            + <span class="string">" usbCharge="</span> + usbCharge + <span class="string">" acCharge="</span> + acCharge</span><br><span class="line">            + <span class="string">" batteryPct="</span> + batteryPct;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析见：<a href="http://stackoverflow.com/questions/3661464/get-battery-level-before-broadcast-receiver-responds-for-intent-action-battery-c" target="_blank" rel="external">Get battery level before broadcast receiver responds for Intent.ACTION_BATTERY_CHANGED</a></p>
<p>###ActionBar的Title是否可以点击的问题<br>4.2之前和之后这个有变化，4.2之前只有Icon可以点击，如果没有Icon，Title就无法点击，4.2之后是Title和Icon一起作为点击区域<br>分析见：<a href="http://stackoverflow.com/questions/16209963/action-bar-icon-as-up-enabled-not-the-title/16216966#16216966" target="_blank" rel="external">Action Bar icon as up enabled not the title</a> </p>
<p>###Webview滚动时背景闪烁的问题<br>因是渲染帧数不够<br>如果使用软件渲染，看下文：<a href="http://stackoverflow.com/questions/17315815/strange-webview-black-blinking-when-scrolling" target="_blank" rel="external">Strange webview black blinking when scrolling</a>，或者启用硬件加速</p>
<p>###Java中使用try catch的性能问题<br>使用try catch并没有额外的性能损耗，只有异常真正发生时才会有性能损耗，详细分析见：<a href="http://stackoverflow.com/questions/2633834/should-java-try-blocks-be-scoped-as-tightly-as-possible" target="_blank" rel="external">Should java try blocks be scoped as tightly as possible</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是另一部分的Android开发笔记整理</p>
<p>###如何完全不显示一个Activity的UI<br>可以使用 <code>android:theme=&quot;@android:style/Theme.NoDisplay&quot;</code> 但是有一个注意]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="Tips" scheme="http://blog.mcxiaoke.com/tags/Tips/"/>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发杂记（二）]]></title>
    <link href="http://blog.mcxiaoke.com/2014/02/25/android-dev-notes-02/"/>
    <id>http://blog.mcxiaoke.com/2014/02/25/android-dev-notes-02/</id>
    <published>2014-02-25T08:28:00.000Z</published>
    <updated>2015-07-07T08:45:34.000Z</updated>
    <content type="html"><![CDATA[<p>2013年下半年的Android开发过程中记录的一些经验和教训，整理出来一部分</p>
<p>###Fragment的状态恢复问题 [20131218]</p>
<p>在FragmentActivity里，如果存在Fragment，系统恢复被销毁的Activity的同时会回复所有FragmentManager里的Fragment列表，然后添加到当前的Activity中，但问题是，Fragment虽然恢复了，状态却没有回复，这些都需要在onCreate或onRestoreInstanceState中手动处理。</p>
<p>FragmentActivity恢复状态的源码如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// onCreate()中</span></span><br><span class="line"><span class="keyword">if</span> (savedInstanceState != <span class="literal">null</span>) &#123;</span><br><span class="line">    Parcelable p = savedInstanceState.getParcelable(FRAGMENTS_TAG);</span><br><span class="line">    <span class="comment">// FragmentManager的restoreAllState会将之前保存的Fragment重新添加到FragmentManager中，并恢复BackStack</span></span><br><span class="line">    mFragments.restoreAllState(p, nc != <span class="literal">null</span> ? nc.fragments : <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>保存状态的源码如下：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Save <span class="literal">all</span> appropriate <span class="keyword">fragment</span> <span class="keyword">state</span>.</span><br><span class="line"> */</span><br><span class="line">@Override</span><br><span class="line">protected void <span class="keyword">on</span>SaveInstanceState(Bundle <span class="keyword">out</span>State) &#123;</span><br><span class="line">    super.<span class="keyword">on</span>SaveInstanceState(<span class="keyword">out</span>State);</span><br><span class="line">    Parcelable p = mFragments.saveAllState();</span><br><span class="line">    if (p != null) &#123;</span><br><span class="line">        <span class="keyword">out</span>State.putParcelable(FRAGMENTS_TAG, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Google建议onCreate中只在savedInstanceState为null的时候才创建和初始化Fragment，代码如下：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (savedInstanceState == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// During initial setup, plug in the details fragment.</span></span><br><span class="line">            DetailsFragment details = <span class="keyword">new</span> DetailsFragment();</span><br><span class="line">            details.setArguments(getIntent().getExtras());</span><br><span class="line">            getFragmentManager().beginTransaction().<span class="built_in">add</span>(android.R.id.content, details).commit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>补充说明：onCreate()和onRestoreInstanceState()都可以用于应用的状态恢复，区别是onRestoreInstanceState()是在onStart()之后调用，可以根据具体情况选择时机。</p>
<p>###裁剪图片的Intent [20131218]</p>
<p>Android系统自带了Gallery和Camera，提供了剪裁和编辑图片功能，虽然没有提供一个文档化的接口，但通常还是可以安全的调用，两种方法都需要在onActivityResult()里处理裁剪结果。</p>
<p>方法一：对已有的图片进行裁剪，Intent如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_CROP = <span class="string">"com.android.camera.action.CROP"</span>;</span><br><span class="line"><span class="comment">/**</span><br><span class="line"> *   裁剪已有的图片</span><br><span class="line"> * <span class="doctag">@param</span> activity 接受裁剪结果的Activity</span><br><span class="line"> * <span class="doctag">@param</span> srcUri 原始图片Uri</span><br><span class="line"> * <span class="doctag">@param</span> destUri 保存裁剪后图片的Uri</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">showCrop</span><span class="params">(Activity activity, Uri srcUri, Uri destUri)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(ACTION_CROP);</span><br><span class="line">    <span class="comment">// 看源码得知，使用setData会清除type，直接setType会清除data</span></span><br><span class="line">    intent.setDataAndType(srcUri, <span class="string">"image/*"</span>);</span><br><span class="line">    <span class="comment">//set crop properties</span></span><br><span class="line">    intent.putExtra(<span class="string">"crop"</span>, <span class="string">"true"</span>);</span><br><span class="line">    <span class="comment">//indicate aspect of desired crop</span></span><br><span class="line">    intent.putExtra(<span class="string">"aspectX"</span>, <span class="number">1</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"aspectY"</span>, <span class="number">1</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"scale"</span>, <span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//indicate output X and Y</span></span><br><span class="line">    intent.putExtra(<span class="string">"outputX"</span>, Constants.AVATAR_DIMEN_MEDIUM);</span><br><span class="line">    intent.putExtra(<span class="string">"outputY"</span>, Constants.AVATAR_DIMEN_MEDIUM);</span><br><span class="line">    <span class="comment">//retrieve data on return</span></span><br><span class="line">    intent.putExtra(<span class="string">"return-data"</span>, <span class="keyword">false</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"noFaceDetection"</span>, <span class="keyword">true</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"setWallpaper"</span>, <span class="keyword">false</span>);</span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, destUri);</span><br><span class="line">    activity.startActivityForResult(intent, Constants.REQUEST_CROP);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法二，选择图片的同时执行裁剪操作：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> *   选择并裁剪图片</span><br><span class="line"> * @param activity 接受裁剪结果的Activity</span><br><span class="line"> * @param destUri 保存裁剪后图片的Uri</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCrop</span><span class="params">(Activity activity, Uri destUri)</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">    intent.setType(<span class="string">"image/*"</span>);</span><br><span class="line">    <span class="comment">//set crop properties</span></span><br><span class="line">    intent.putExtra(<span class="string">"crop"</span>, <span class="string">"true"</span>);</span><br><span class="line">    <span class="comment">//indicate aspect of desired crop</span></span><br><span class="line">    intent.putExtra(<span class="string">"aspectX"</span>, <span class="number">1</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"aspectY"</span>, <span class="number">1</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"scale"</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//indicate output X and Y</span></span><br><span class="line">    intent.putExtra(<span class="string">"outputX"</span>, Constants.AVATAR_DIMEN_MEDIUM);</span><br><span class="line">    intent.putExtra(<span class="string">"outputY"</span>, Constants.AVATAR_DIMEN_MEDIUM);</span><br><span class="line">    <span class="comment">//retrieve data on return</span></span><br><span class="line">    intent.putExtra(<span class="string">"return-data"</span>, <span class="literal">false</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"noFaceDetection"</span>, <span class="literal">true</span>);</span><br><span class="line">    intent.putExtra(<span class="string">"setWallpaper"</span>, <span class="literal">false</span>);</span><br><span class="line">    intent.putExtra(MediaStore.EXTRA_OUTPUT, destUri);</span><br><span class="line">    activity.startActivityForResult(intent, Constants.REQUEST_GALLERY);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###加载资源的另一种方法 [20131218]</p>
<p>Android系统中有多重方法加载资源文件，比如读取drawable目录的图片可以用getResources().getDrawable()，读取values目录的字符串可以用getResources().getString()，读取raw目录的文件可以用getResources().openRawResource()，读取assets目录的文件可以用getAssets().open()，这些都是Android系统特有的方法，除此之外，我们还可以用Java提供的加载资源的方法，这种方法不受位置限制，可以放在源文件相同的目录，下面是例子：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如要加载src/com/douban/shuo/res/目录下的icon.png图片</span></span><br><span class="line"><span class="comment">// 可以这样做：</span></span><br><span class="line"><span class="built_in">String</span> path = <span class="string">"com/douban/shuo/res/icon.png"</span>;</span><br><span class="line">InputStream <span class="keyword">is</span> = getClassLoader().getResourceAsStream(path);</span><br><span class="line">Drawable.createFromStream(<span class="keyword">is</span>, <span class="string">"src"</span>);</span><br></pre></td></tr></table></figure>
<p>getResourceAsStream是JDK 1.1开始就有的方法，可以通过ClassLoader加载任何格式的资源，返回一个InputStream供使用，具体路径解析规则可以看看这篇文章<a href="http://blog.csdn.net/ouyang_peng/article/details/8856764" target="_blank" rel="external">ClassLoader.getResourceAsStream() 与 Class.getResourceAsStream()的区别</a></p>
<p>###在onActivityResult中显示Dialog [20131218]</p>
<p>有时会遇到这样的场景，通过startActivityForResult调用某一个应用等待返回结果，然后在onActivityResult中需要异步处理的同时显示对话框，如果直接在onActivityResult中调用Dialog.show()会报错，因为onActivityResult是在onResume之前，一个类似的问题是，在onSaveInstanceState调用之后也不能进行FragmentTransaction的commit操作，这两个都影响到DialogFragment，正确的做法有两种：</p>
<ul>
<li>方法一：在onPostResume显示对话框</li>
<li>方法二：在onActivityResult设置一个标志(比如mPendingShowDialog)为true，然后在onResume()的时候检查标志，如果为true就显示对话框</li>
</ul>
<p>注意：不仅是Dialog，处理Fragment相关的transactions和commit操作都需要考虑这个问题，在onSaveInstanceState调用之后如果需要commit，请替换成commitAllowingStateLoss，如果不允许状态丢失，就需要寻找其它替代方法。</p>
<p>详细解释可以参考：<a href="http://stackoverflow.com/questions/16265733/failure-delivering-result-onactivityforresult" target="_blank" rel="external">“Failure Delivering Result ” - onActivityForResult</a>。</p>
<p>###建议所有ID都定义在values里面 [20131218]<br>MenuItem ID最好和其它的resource id一样，定义在values里面，可以避免冲突，直接使用系统的Menu.FIRST递增容易冲突，比如和ShareActionProvider冲突(测试时看到使用的ID是2，Menu.FIRST值为1)</p>
<p>###Fragment的背景问题 [20131017]</p>
<p>如果使用Activity+Fragment的结构的话，一般至少会有三种背景，最底层的是Theme的背景，属性为<code>android:windowBackgroun d</code>，这个如果没有设置默认是白色/黑色（依主题不同），中间层是Activity的<code>android:background</code>，上面一层是Fragment的<code>android:background</code>,如果Fragment里面的View也有背景的话就会有多层背景，会有过度绘制的问题，性能会下降很多，4.1以上的系统的开发者选项里有一个<strong>[显示GPU过度绘制]</strong>选项，开启后会用颜色表示过度绘制的区域，从最优到最差依次是蓝绿淡红和红，除了个别图标和层次较深的文字以外，一般如果大片区域出现淡红色和红色就是比较严重的性能问题，特别是在ListView等多层嵌套的控件里。</p>
<p>这时候就需要针对性的进行优化，一般有两种方法：</p>
<ol>
<li>优化布局，尽量减少层次，典型的如使用RelativeLayout，使用merge，使用Canvas直接绘制（极端情况下，阅读类应用很多都是这样）等；</li>
<li>去除不必要的背景，没有特殊需要的话，Activity不设置背景，大部分情况下Fragment也可以不设置背景，网上建议将android:windowBackground设置为@null在很多时候会有问题，比如Activity被销毁再打开的时候会呈现短暂的黑色背景（其实是没有背景），如果Activity不设置背景在某些情况下也会出现这种情况，特别是在内存不足Activity被销毁后从最近任务列表返回时。</li>
</ol>
<blockquote>
<p>Fragment不设置背景存在的问题是，如果采用的是一个Activity+多个Fragment切换的结构，在部分机型上，Fragment切换后，前一个Fragment的画面会残留在背景上，造成重影现象，原因应该是系统认为Fragment没有设置背景所以没有强制刷新，真正的原因需要看源码才能确定。</p>
</blockquote>
<p>更详细的绘图性能调优方法可以参考<a href="http://www.curious-creature.org/2012/12/01/android-performance-case-study/" target="_blank" rel="external">Android Performance Case Study</a>，具体应用时，还需要考虑到小米/魅族等机型和2.3系统的兼容性问题</p>
<p>###魅族M9的资源解析 [20131017]</p>
<p>如果在res目录里存在不能识别的资源ID会直报InflateException导致Crash，M9使用2.3系统，不能识别3.0以上才支持的ActionBar相关的属性，比如 <code>android:actionBarStyle</code> ，所以使用ActionBarSherlock时，ActionBar相关的属性必须分开放，不带android命名空间的放在values目录，带android命名空间的必须放在values-v14目录，这个之前Bear的日记里也有提到，具体见 <a href="https://github.com/JakeWharton/ActionBarSherlock/issues/446" target="_blank" rel="external">ABS causes an InflateException on some devices</a></p>
<p>###摩托ME525的ListView显示 [20131017]</p>
<p>如果ListView设置了MATCH_PARENT但是内容太少又没有撑满空间，ListView会自动缩小至显示内容所需区域，空白空间会显示默认的背景色，在ME525上是灰色块，解决办法是在主题里加上：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=<span class="string">"android:overScrollFooter"</span>&gt;<span class="variable">@android</span><span class="symbol">:color/transparent&lt;/item&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者在布局里使用</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">android:</span>overScrollFooter=<span class="string">"@android:color/transparent"</span></span><br></pre></td></tr></table></figure>
<p>具体见 <a href="http://stackoverflow.com/questions/10655646/background-color-listview" target="_blank" rel="external">Background color (listview?)</a></p>
<p>###ImageView的adjustViewBounds属性 [20131017]</p>
<ol>
<li><p>adjustViewBounds属性设置为true的作用是保持原始图片的长宽比，某些情况下这可能不是你想要的效果，比如广播里缩略图需要保持正方形，这时候你需要手动设置长和宽，不能使用WRAP_CONTENT，也可以重写ImageView的onMeasure()方法强制保持长宽一致，广播源码里的SquaredCheckableImage就是重写了onMeasure()方法：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">	setMeasuredDimension(getMeasuredWidth(), getMeasuredWidth());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>maxHeight</code>和<code>maxWidth</code>属性必须同时设置<code>adjustViewBounds</code>为true才能生效，原因见<code>ImageView.onMeasure()</code>方法的源码，只有<code>mAdjustViewBounds</code>为true时才会检查并设置<code>resizeWidth</code>和<code>resizeHeight</code>两个布尔值，只有当这两个值至少一个为true时才会进行调整ImageView大小的缩放操作；3. 设置<code>adjustViewBounds</code>为true会导致<code>scaleType</code>重置为FIT_CENTER，源码里setAdjustViewBounds方法里有这样一句：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setAdjustViewBounds</span><span class="params">(<span class="keyword">boolean</span> adjustViewBounds)</span> </span>&#123;</span><br><span class="line">	mAdjustViewBounds = adjustViewBounds;</span><br><span class="line">	<span class="keyword">if</span> (adjustViewBounds) &#123;</span><br><span class="line">		setScaleType(ScaleType.FIT_CENTER);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>具体见官方文档和ImageView的源码，还有这里 <a href="http://stackoverflow.com/questions/10917388/android-adjustviewbounds-bug" target="_blank" rel="external">android adjustViewBounds bug?</a></p>
<p>###ListView中Item的点击状态 [20131017]</p>
<p>在小米1S等手机中，如果ListView的Item非常复杂，Item的子View的PRESS_STATE可能有问题，在小米1S上的表现就是ListView的onItemClick事件会触发该Item所有子View的PRESSED和FOCUSED状态，如果某些View设置了StateListDrawable为背景，就可以看到Drawable的状态变了，设置<code>android:duplicateParentState</code> <code>android:descendantFocusability</code> <code>android:focusable</code> <code>android:focusableInTouchMode</code> <code>android:clickable</code> 均没有效果，StackOverFlow上给出的解决办法（以LinearLayout为例）：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NoPressStateLinearLayout</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">LinearLayout</span> &#123;</span></span><br><span class="line">	......</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    public void setPressed(boolean pressed) &#123;</span><br><span class="line"><span class="comment">//        super.setPressed(pressed);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果上面的办法还不行，也可以这样：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">NoPressStateLinearLayout</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">LinearLayout</span> &#123;</span></span><br><span class="line">	......</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void dispatchSetPressed(boolean pressed) &#123;</span><br><span class="line">        <span class="comment">// avoid handing on the event to the child views</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是，如果子View需要处理这些状态，可能会有冲突，ListView的事件响应问题还可以参考 <a href="http://cyrilmottier.com/2011/11/23/listview-tips-tricks-4-add-several-clickable-areas/" target="_blank" rel="external">ListView Tips &amp; Tricks #4: Add Several Clickable Areas</a></p>
<p>###Shape Drawable填充问题 [20131017]</p>
<p>广播里需要用到一个自定义的带边框的Button背景，开始我写的是这样的：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">shape</span> xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">       android:<span class="built_in">shape</span>=<span class="string">"rectangle"</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">stroke</span></span><br><span class="line">            android:<span class="variable">width</span>=<span class="string">"1dp"</span></span><br><span class="line">            android:<span class="built_in">color</span>=<span class="string">"@color/soft_white"</span>/&gt;</span><br><span class="line">    &lt;corners</span><br><span class="line">            android:radius=<span class="string">"1dp"</span>/&gt;</span><br><span class="line">&lt;/<span class="built_in">shape</span>&gt;</span><br></pre></td></tr></table></figure>
<p>只是一个边框，大部分机子上这样就可以了，但是在部分索尼（如我的Xperia U上）和摩托的机子（如ME525）上会出现只有边框，中间部分是全黑的，原因是这个Shape只有边框，中间的区域没有东西（没有任何颜色绘制），正常情况没有东西就不会绘制任何东西，但是部分机子不知道为何会填充默认的黑色背景，解决办法是中间区域设置为透明，修改后的drawable如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">shape</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">       <span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--内部用透明色填充--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">solid</span></span><br><span class="line">            <span class="attribute">android:color</span>=<span class="value">"@color/transparent"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">stroke</span></span><br><span class="line">            <span class="attribute">android:width</span>=<span class="value">"1dp"</span></span><br><span class="line">            <span class="attribute">android:color</span>=<span class="value">"@color/soft_white"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">corners</span></span><br><span class="line">            <span class="attribute">android:radius</span>=<span class="value">"1dp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>###HTTP发送大量数据 [20131017]</p>
<p>2.0版广播支持发布带图和图片批量上传，测试过程发现在Nexus S 2.3系统上多次出现发送失败但是又没有抛异常的情况，后来找到原因了，是natalya库里的HttpRequest里使用的SimpleMultipartEntity处理Multipart类型数据有问题，代码：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">   ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">   ......</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> addPart(<span class="keyword">final</span> <span class="keyword">String</span> <span class="variable">key</span>, <span class="keyword">final</span> <span class="keyword">String</span> fileName, <span class="keyword">final</span> InputStream fin, <span class="keyword">String</span> type, <span class="keyword">final</span> <span class="built_in">boolean</span> isLast)&#123;</span><br><span class="line">......</span><br><span class="line">           out.write(<span class="string">"Content-Transfer-Encoding: binaryrnrn"</span>.getBytes());</span><br><span class="line">		<span class="comment">// 这里会读取InputStream并全部写入到ByteArrayOutputStream中，数据量大时会造成OOM</span></span><br><span class="line">           <span class="keyword">final</span> <span class="built_in">byte</span>[] tmp = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">4096</span>];</span><br><span class="line">           <span class="built_in">int</span> l = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">while</span> ((l = fin.read(tmp)) != -<span class="number">1</span>) &#123;</span><br><span class="line">               out.write(tmp, <span class="number">0</span>, l);</span><br><span class="line">           &#125;</span><br><span class="line">......</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>加注释的那一行就是问题所在，上传文件时会一次性读取全部的数据流并写入到ByteArrayOutputStream，超过一定限制时会造成OOM。<br><a href="http://developer.android.com/reference/java/net/HttpURLConnection.html" target="_blank" rel="external">HttpURLConnection</a> 文档里说明了POST数据时，HttpURLConnection默认是读取全部数据到内存然后再通过网络发送，如果数据量过大建议使用<code>setFixedLengthStreamingMode(int)</code>（知道需要POST的数据流的精确长度时）或<code>setChunkedStreamingMode(int)</code>（无法计算或不知道需要POST的数据流的精确长度时）:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Posting Content</span><br><span class="line"></span><br><span class="line">To upload data to a web server, configure the connection for output using setDoOutput(true).For best performance, you should <span class="operator"><span class="keyword">call</span> either <span class="string">`setFixedLengthStreamingMode(int)`</span> <span class="keyword">when</span> the <span class="keyword">body</span> <span class="keyword">length</span> <span class="keyword">is</span> known <span class="keyword">in</span> advance, <span class="keyword">or</span> <span class="string">`setChunkedStreamingMode(int)`</span> <span class="keyword">when</span> it <span class="keyword">is</span> <span class="keyword">not</span>. Otherwise HttpURLConnection will be forced <span class="keyword">to</span> buffer the <span class="keyword">complete</span> request <span class="keyword">body</span> <span class="keyword">in</span> <span class="keyword">memory</span> <span class="keyword">before</span> it <span class="keyword">is</span> transmitted, wasting (<span class="keyword">and</span> possibly exhausting) <span class="keyword">heap</span> <span class="keyword">and</span> increasing latency.</span></span><br></pre></td></tr></table></figure>
<p>###时区与日期显示问题 [20131017]</p>
<p>现在豆瓣API返回的日期字符串默认都是东八区的本地时间，实际显示时如果不考虑时区，在东八区以外的地区就会有问题，特别是用于和本地时间比较时，所以解析API返回的日期字符串时需要给DateFormat设置时区，这样解析出来的Date才是对的，方法如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API时间的默认时区</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> TimeZone TIME_ZONE_CHINA = TimeZone.getTimeZone(<span class="string">"GMT+8"</span>);</span><br><span class="line"><span class="comment">// 豆瓣API返回的时间格式</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATE_FORMAT_STRING = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">Date <span class="title">parseDate</span><span class="params">(String dateStr)</span> </span>&#123;</span><br><span class="line">    DateFormat df = <span class="keyword">new</span> SimpleDateFormat(DATE_FORMAT_STRING);</span><br><span class="line">    df.setTimeZone(TIME_ZONE_CHINA);</span><br><span class="line">    <span class="keyword">final</span> ParsePosition position = <span class="keyword">new</span> ParsePosition(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">return</span> df.<span class="title">parse</span><span class="params">(dateStr, position)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>###用adb备份和恢复应用数据 [20131218]</p>
<p>日常开发过程中有时会碰到app签名不一致需要卸载重新安装的问题，重新安装之后之前的应用配置和数据就都丢失了，有个技巧可以在卸载前备份数据，在重新安装后恢复数据：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设包名是 com.douban.shuo</span></span><br><span class="line"><span class="comment">// 备份包名对应app的数据</span></span><br><span class="line">adb backup com<span class="class">.douban</span><span class="class">.shuo</span></span><br><span class="line"><span class="comment">// 从备份中恢复数据</span></span><br><span class="line">adb restore backup.ab</span><br></pre></td></tr></table></figure>
<p>注意：使用前提是手机已经解锁，其实adb backup/restore是系统提供的一个备份工具，可以用于整机备份，有兴趣的可以这篇文章：<a href="http://forum.xda-developers.com/showthread.php?t=1420351" target="_blank" rel="external">Full Phone Backup without Unlock or Root</a>，至于通过代码的方式备份和恢复应用数据，可以参考官方文档，国内的话由于网络原因估计不太好用：<a href="http://developer.android.com/guide/topics/data/backup.html" target="_blank" rel="external">Data Backup</a></p>
<p>###APK签名检测脚本 [20131218]</p>
<p>写了一个简单的apk签名检测脚本，可以显示签名的详细信息：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#jarsigner -verify -verbose -certs $1</span></span><br><span class="line">INPUT=<span class="variable">$1</span></span><br><span class="line">OUTPUT=apk.tmp</span><br><span class="line">rm -rf <span class="variable">$&#123;OUTPUT&#125;</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &gt; /dev/null</span><br><span class="line">unzip <span class="variable">$&#123;INPUT&#125;</span> <span class="operator">-d</span> <span class="variable">$&#123;OUTPUT&#125;</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &gt; /dev/null</span><br><span class="line">openssl pkcs7 -inform DER -noout -print_certs -text -in <span class="variable">$&#123;OUTPUT&#125;</span>/META-INF/CERT.RSA</span><br><span class="line">rm -rf <span class="variable">$&#123;OUTPUT&#125;</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> &gt; /dev/null</span><br></pre></td></tr></table></figure>
<p>###切换Android Studio的默认构建类型 [20131218]</p>
<p>Android Studio–View–Tool Windows–Build Variants可以切换，一般默认建议使用release签名+开启debug的构建类型，以广播饿为例，build.gradle有如下配置：</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">buildTypes</span> &#123;</span><br><span class="line">    <span class="title">release</span> &#123;</span><br><span class="line">        <span class="title">signingConfig</span> signingConfigs.release</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    beta &#123;</span><br><span class="line">        <span class="title">signingConfig</span> signingConfigs.release</span><br><span class="line">        debuggable <span class="built_in">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">debug</span> &#123;</span><br><span class="line">        <span class="title">packageNameSuffix</span> null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Android Studio中设置默认使用beta构建类型，build生成的apk默认使用release签名，但是BuildConfig.DEBUG为true，debug为true便于调试，使用release签名避免了给其他人测试时，或者使用qaci的构建包时签名冲突，当然，也有其它的解决办法，比如所有人使用统一的debug签名，我觉得使用buildTypes比较灵活，还可以自定义很多其它选项，比如修改包名，修改应用名，版本名，添加构建时间等。</p>
<p>###Idea插件QAPlug [20131017]</p>
<p>  IDEA有很多有用的插件，我推荐一个<a href="http://qaplug.com/" target="_blank" rel="external">QAPlug</a>，这个插件包含几个独立的模块(<a href="http://plugins.jetbrains.com/search/index?pr=idea&amp;search=qaplug" target="_blank" rel="external">Findbugs/PMD/CheckStyle</a>)，可选择安装，Findbugs是一个代码缺陷检测工具，可以帮助寻找代码中的各种隐患或潜在的性能问题；PMD是一个静态代码分析工具，可以检查复杂的逻辑结构/资源使用/重复代码等问题，帮助提高代码质量；CheckStyle则专注于代码规范，可以检查命名约定/类设计/方法设计/import/空白等。这三个工具都可以指定自定义的规则，推荐每次版本发布前对代码进行一次全面的检查，有些提示是不需要修改的，但是还是能发现一些潜在的问题的，对于Android,还要做的一个检查是Lint，版本发布前对代码做一个全面的检查至少可以避免一些平时因疏忽导致的低级问题。这个插件和IDEA集成，使用起来非常简单，官网页面有详细的说明。</p>
<p>###跳转到第三方应用无法返回的问题 [20131218]</p>
<p>广播的时间线有很多地方可以点击跳转到第三方应用，比如电影/FM/小组/浏览器等 ，测试发现奇怪的问题，跳转到第三方应用后，按返回键没有返回到广播，直接返回到手机桌面了，后来发现是FLAG_ACTIVITY_NEW_TASK的问题，使用Intent跳转到其它应用，如果没有添加Intent.FLAG_ACTIVITY_NEW_TASK标志，按返回键时不能返回到上一个应用，在4.1以上系统上都是如此。所以，建议在使用Intent跳转到第三方应用的地方添加Intent.FLAG_ACTIVITY_NEW_TASK标志（选择图片等功能不需要，这时候他们位于同一个TASK）。</p>
<p>系统的某些功能和应用也存在这个问题，在某个应用处于前台时，如果点击通知栏的一个通知跳转到了其它应用，返回时有可能直接返回了手机桌面，而不是当前应用。</p>
<p>###无法直接启动其它应用的Activity [20131218]</p>
<p>广播的上传通知点击后会弹出一个对话框形式的Activity，有几次点击没反应，log里看到如下的错误信息：</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12-03 15:52:33.133 611-622/? W/ActivityManager﹕ Permission Denial: starting Intent &#123; flg=0x10000000 cmp=com.douban.shuo/.app.UploadNotifyActivity bnds=[<span class="link_label">0,102</span>][<span class="link_reference">768,230</span>] (has extras) &#125; from null (pid=-1, uid=10191) not exported from uid 10192</span><br><span class="line">12-03 15:52:33.133 611-622/? W/ActivityManager﹕ Unable to send startActivity intent</span><br><span class="line">java.lang.SecurityException: Permission Denial: starting Intent &#123; flg=0x10000000 cmp=com.douban.shuo/.app.UploadNotifyActivity bnds=[<span class="link_label">0,102</span>][<span class="link_reference">768,230</span>] (has extras) &#125; from null (pid=-1, uid=10191) not exported from uid 10192</span><br></pre></td></tr></table></figure>
<p>而且只有4.4的系统存在这个问题，查资料后发现从4.4版本开始，使用ClassName方式直接调用第三方Activity是不允许的，需要目标Activity在AndroidManifest里面明确声明了android:exported=”true” 才可以，需要注意的是，不仅仅是第三方应用，只要是不同的进程，都必须声明为android:exported=”true”，Activity才可以被直接调用。</p>
<p>###Kitkat系统WebView的换行问题 [20131218]</p>
<p>4.4开始，webview不会自动断行，需要在html里处理，代码里也可以这样处理：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">if (MiscUtils.hasKitkat()) &#123;</span><br><span class="line">    settings<span class="string">.setLayoutAlgorithm(WebSettings.LayoutAlgorithm.TEXT_AUTOSIZING)</span>;</span><br><span class="line">    &#125;</span></span><br></pre></td></tr></table></figure>
<p>但是很多网页这样不解决问题，还需要在Html里处理：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">pre</span> <span class="attribute">style</span>=<span class="value">"word-wrap: break-word; white-space: pre-wrap;"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>@wuzeyi 说吃喝组里是直接在html里写上了word-break:break-all;有用到可以参考。</p>
<p>详细的方法可以看官方的说明：</p>
<p><a href="http://developer.android.com/guide/webapps/migrating.html#Columns" target="_blank" rel="external">http://developer.android.com/guide/webapps/migrating.html#Columns</a>和<a href="https://code.google.com/p/android/issues/detail?id=62378" target="_blank" rel="external">https://code.google.com/p/android/issues/detail?id=62378</a></p>
<p>补充一点，4.2以后的系统，通过JS调用Java函数时，需要添加@JavascriptInterface这个Annotation，否则系统会忽略这个函数。</p>
<p>###Framelayout的margin设置无效的问题 [20131218]<br>4.0以前的系统FrameLayout的margin设置有时不生效，查资料发现原因是没有设置layout_gravity，这是4.0之前系统个一个BUG，见<a href="https://code.google.com/p/android/issues/detail?id=28057" target="_blank" rel="external">https://code.google.com/p/android/issues/detail?id=28057</a>，猜测是因为FrameLayout需要一个定位的锚点，布局文件里加入以下代码即可：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置上下margin必须有top，设置左右margin必须有left</span></span><br><span class="line"><span class="comment">// layout_gravity必须有一个值，margin才会生效</span></span><br><span class="line"><span class="string">android:</span>layout_gravity=<span class="string">"top|left"</span></span><br></pre></td></tr></table></figure>
<p>代码里可以这样设置：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MarginLayoutParams marginParams = <span class="keyword">new</span> MarginLayoutParams(<span class="keyword">this</span>.getLayoutParams());  </span><br><span class="line">marginParams.<span class="variable">height</span> = <span class="keyword">this</span>.getMeasuredHeight();  </span><br><span class="line">marginParams.<span class="variable">width</span> = <span class="keyword">this</span>.getMeasuredWidth();  </span><br><span class="line">marginParams.setMargins(l,t,r,b);  </span><br><span class="line">LayoutParams layoutParams = <span class="keyword">new</span> LayoutParams(marginParams);  </span><br><span class="line"><span class="comment">// 起作用的是这一行</span></span><br><span class="line">layoutParams.gravity = Gravity.TOP|Gravity.LEFT;  </span><br><span class="line">setLayoutParams(layoutParams);</span><br></pre></td></tr></table></figure>
<p>参考文档：</p>
<p><a href="http://blog.csdn.net/fengye810130/article/details/9147695" target="_blank" rel="external">http://blog.csdn.net/fengye810130/article/details/9147695</a><br><a href="http://stackoverflow.com/questions/5401952/framelayout-margin-not-working" target="_blank" rel="external">http://stackoverflow.com/questions/5401952/framelayout-margin-not-working</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2013年下半年的Android开发过程中记录的一些经验和教训，整理出来一部分</p>
<p>###Fragment的状态恢复问题 [20131218]</p>
<p>在FragmentActivity里，如果存在Fragment，系统恢复被销毁的Activity的同时会回]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="Tips" scheme="http://blog.mcxiaoke.com/tags/Tips/"/>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Ubuntu软件安装和使用配置]]></title>
    <link href="http://blog.mcxiaoke.com/2011/05/30/ubuntu-install-software-and-config/"/>
    <id>http://blog.mcxiaoke.com/2011/05/30/ubuntu-install-software-and-config/</id>
    <published>2011-05-30T06:00:00.000Z</published>
    <updated>2015-07-07T08:48:20.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>2011.05.06 Ver 1.0</li>
<li>2011.05.11 Ver 1.1</li>
<li>2011.05.12 Ver 1.2</li>
<li>2011.05.29 Ver 1.3 增加Dropbox安装配置，删除过时内容  </li>
</ul>
<p>每次重装的话都要安装很多软件，修改配置，我的记性不是很好，每次都要网上查，这次记下来这些资料备用</p>
<h2 id="u7CFB_u7EDF_u5B89_u88C5"><a href="#u7CFB_u7EDF_u5B89_u88C5" class="headerlink" title="系统安装"></a>系统安装</h2><h3 id="u5168_u65B0_u5B89_u88C5"><a href="#u5168_u65B0_u5B89_u88C5" class="headerlink" title="全新安装"></a>全新安装</h3><p>WIN+LINUX双系统的话，在WIN下面可以用easybcd启动ISO安装，当然，最简单的方式是直接刻盘光盘安装。要补充的一点是，如果安装时要使用lvm，就必须使用文本模式安装，图形模式虽然也可以，但比较复杂，而且容易出问题<br>单系统模式就简单了，直接使用整个硬盘，但是要自己控制分区方案的话，分区时要选择高级，手动分区</p>
<p>###保留数据重装<br>保留数据一般是指保留/home分区的数据，前提是你的/home是单独分区的。重装系统时选高级手动分区，只格式化/分区，/home分区直接挂载为新的/home分区(我不清楚lvm虚拟卷可不可直接识别和挂载)，不能格式化，为避免新系统的配置文件冲突，最好使用livecd先删除/home/username目录下的.开头的大量配置文件，如果nautilus里看不到，使用Ctrl+H就可以看到所有的隐藏文件，新系统的用户名最好和原来的一致，这样就可以减少转移文件的麻烦。更详细的说明可以参考这篇文章：<a href="http://ubuntuabc.com/123/?p=23" target="_blank" rel="external">http://ubuntuabc.com/123/?p=23</a></p>
<h2 id="u65B0_u7CFB_u7EDF_u914D_u7F6E"><a href="#u65B0_u7CFB_u7EDF_u914D_u7F6E" class="headerlink" title="新系统配置"></a>新系统配置</h2><h3 id="u914D_u7F6E_u8F6F_u4EF6_u6E90"><a href="#u914D_u7F6E_u8F6F_u4EF6_u6E90" class="headerlink" title="配置软件源"></a>配置软件源</h3><p>首先备份原有的软件源 </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources<span class="class">.list</span> /etc/apt/sources<span class="class">.list</span><span class="class">.bak</span></span><br></pre></td></tr></table></figure>
<p>然后去 </p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">http:</span>//wiki.ubuntu<span class="preprocessor">.org</span>.cn/Qref/Source</span><br></pre></td></tr></table></figure>
<p>挑选一个速度最快的源加入 sources.list 不要加入多个，反而影响索引速度  </p>
<h4 id="u66F4_u65B0_u8F6F_u4EF6_u6E90"><a href="#u66F4_u65B0_u8F6F_u4EF6_u6E90" class="headerlink" title="更新软件源"></a>更新软件源</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="keyword">update</span></span><br></pre></td></tr></table></figure>
<h4 id="u66F4_u65B0_u7CFB_u7EDF"><a href="#u66F4_u65B0_u7CFB_u7EDF" class="headerlink" title="更新系统"></a>更新系统</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> <span class="built_in">dist</span>-upgrade</span><br></pre></td></tr></table></figure>
<h4 id="Unity_u914D_u7F6E_u5DE5_u5177"><a href="#Unity_u914D_u7F6E_u5DE5_u5177" class="headerlink" title="Unity配置工具"></a>Unity配置工具</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> compizconfig-<span class="keyword">settings</span>-manager</span></span><br></pre></td></tr></table></figure>
<h4 id="PPA_u7BA1_u7406_u5668"><a href="#PPA_u7BA1_u7406_u5668" class="headerlink" title="PPA管理器"></a>PPA管理器</h4><p>安装y-ppa manager</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:webupd8team/y-ppa-manager</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install y-ppa-manager</span><br></pre></td></tr></table></figure>
<h4 id="u5B57_u4F53_u5B89_u88C5"><a href="#u5B57_u4F53_u5B89_u88C5" class="headerlink" title="字体安装"></a>字体安装</h4><p>直接双击字体，在查看对话框中点击安装即可<br>或者直接复制到~/.fonts目录就可以，不需要任何配置，非常简单<br>文件浏览右键管理员</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install nautilus-gksu</span><br></pre></td></tr></table></figure>
<h4 id="u8BBE_u7F6E_u4E2D_u6587MAN"><a href="#u8BBE_u7F6E_u4E2D_u6587MAN" class="headerlink" title="设置中文MAN"></a>设置中文MAN</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias cman='<span class="keyword">man</span> -<span class="keyword">M</span> /usr/share/<span class="keyword">man</span>/zh_CN'</span><br></pre></td></tr></table></figure>
<p>想用中文man时： cman command<br>想用英文man： man command</p>
<p>设置curl不检查SSL证书</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">'insecure'</span> &amp;<span class="keyword">gt</span>;&amp;<span class="keyword">gt</span>; ~/.curlrc</span><br></pre></td></tr></table></figure>
<h4 id="Unity_u914D_u7F6E"><a href="#Unity_u914D_u7F6E" class="headerlink" title="Unity配置"></a>Unity配置</h4><p>解除Unity的系统托盘显示限制</p>
<ul>
<li>命令行方式：<br>解禁所有程序</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings set com<span class="class">.canonical</span><span class="class">.Unity</span><span class="class">.Panel</span> systray-whitelist <span class="string">"['all']"</span></span><br></pre></td></tr></table></figure>
<p>或者只解禁部分程序，把 YOUR_APPLICATION 替换成你需要解禁的程序</p>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings set <span class="transposed_variable">com.</span><span class="transposed_variable">canonical.</span><span class="transposed_variable">Unity.</span>Panel systray-whitelist <span class="string">"['</span><span class="transposed_variable">JavaEmbeddedFrame'</span>, <span class="string">'Mumble'</span>, <span class="string">'Wine'</span>, <span class="string">'Skype'</span>, <span class="string">'hp-systray'</span>, <span class="string">'YOUR_APPLICATION'</span>]<span class="string">"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>GUI 方式：<br>安装 dconf-tools</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install dconf-tools</span><br></pre></td></tr></table></figure>
<p>在终端中输入 dconf-editor ，然后找到  desktop &gt; unity &gt; panel ，把 systray-whitelist 的值改为 [‘all’]</p>
<h2 id="u5B89_u88C5_u5E38_u7528_u8F6F_u4EF6"><a href="#u5B89_u88C5_u5E38_u7528_u8F6F_u4EF6" class="headerlink" title="安装常用软件"></a>安装常用软件</h2><p>####压缩和解压缩</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> unace unrar zip unzip p7zip-<span class="keyword">full</span> p7zip-rar sharutils uudeview mpack lha arj cabextract <span class="keyword">file</span>-roller</span></span><br></pre></td></tr></table></figure>
<p>不要安装源里的rar，会乱码，p7zip-rar和unrar都不会乱码  </p>
<p>新版iBus输入法，自带的版本很老，可以用ppa安装最新版</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:shawn-p-huang/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ibus-gtk ibus-pinyin ibus-pinyin-db-open-phrase</span><br></pre></td></tr></table></figure>
<p>####文本编辑器<br>自带的gedit其实够用，可以不安装其他的，需要的话也可以安装scribes，geany<br>需要修改一点gedit的配置才可以自动识别中文编码：运行gconf-editor，展开/apps/gedit-2/preferences/encodings节点，加入GB18030和BIG5-HKSCS</p>
<h4 id="u6D4F_u89C8_u5668"><a href="#u6D4F_u89C8_u5668" class="headerlink" title="浏览器"></a>浏览器</h4><p>11.04自带最新的4.0</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:mozillateam/firefox-stable</span><br><span class="line">sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure>
<p>如果没有安装Firefox可以直接</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install firefox</span><br></pre></td></tr></table></figure>
<p>安装Chrome稳定版，需要直接去官网下载</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//<span class="keyword">dl</span>-ssl.google.<span class="keyword">com</span>/linux/direct/google-chrome-stable_current_i386.<span class="keyword">deb</span></span><br><span class="line">sudo dpkg -<span class="keyword">i</span> google-chrome-stable_current_i386.<span class="keyword">deb</span></span><br></pre></td></tr></table></figure>
<p>Chrome 10以后的版本默认为难看的楷体，字体修改方法</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//imcn.me/html/y2011/3306.html</span></span><br><span class="line"><span class="string">http:</span><span class="comment">//imcn.me/html/y2011/3386.html</span></span><br><span class="line"><span class="string">http:</span><span class="comment">//www.linuxidc.com/Linux/2011-05/35375.htm</span></span><br></pre></td></tr></table></figure>
<h4 id="u6587_u6863_u9605_u8BFB"><a href="#u6587_u6863_u9605_u8BFB" class="headerlink" title="文档阅读"></a>文档阅读</h4><p>增强自带的PDF阅读能力，增加pdf和其它格式的相互转换</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">sudo</span> apt-<span class="preprocessor">get</span> install <span class="keyword">poppler-data </span><span class="keyword">poppler-utils</span></span><br></pre></td></tr></table></figure>
<h4 id="u5907_u4EFD_u540C_u6B65"><a href="#u5907_u4EFD_u540C_u6B65" class="headerlink" title="备份同步"></a>备份同步</h4><p>安装dropbox<br>首先官网下载</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="variable">s:</span>//www.dropbox.<span class="keyword">com</span>/download?<span class="keyword">dl</span>=packages/nautilus-dropbox_0.<span class="number">6.7</span>_i386.<span class="keyword">deb</span></span><br></pre></td></tr></table></figure>
<p>安装后还需要安装dropbox的daemon，这个无法直接下载，可以用vpn<br>或者直接用代理下载下面这个</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//www.getdropbox.com/download?plat=lnx.x86</span></span><br></pre></td></tr></table></figure>
<p>然后直接在～目录解压，文件会解压到 ~/.dropbox-dist/ ，daemon就装好了，直接就可以运行<br>更详细的说明见：<br><a href="http://freedomhui.com/?p=149" target="_blank" rel="external">http://freedomhui.com/?p=149</a><br>电子书制作和阅读</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install calibre fbreader</span><br></pre></td></tr></table></figure>
<p>需要最新版的话可以自己下载源码编译安装</p>
<h4 id="u56FE_u50CF_u5904_u7406"><a href="#u56FE_u50CF_u5904_u7406" class="headerlink" title="图像处理"></a>图像处理</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install gimp inkscape imagemagick dia</span><br></pre></td></tr></table></figure>
<h4 id="u97F3_u4E50_u64AD_u653E"><a href="#u97F3_u4E50_u64AD_u653E" class="headerlink" title="音乐播放"></a>音乐播放</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:nilarimogard/webupd8</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install audacious</span><br></pre></td></tr></table></figure>
<p>MP3 GBK标签转码工具</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">python</span>-mutagen</span><br></pre></td></tr></table></figure>
<p>执行转码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -iname <span class="string">"*.mp3"</span> -execdir mid3iconv <span class="operator">-e</span> gbk &#123;&#125; ;</span><br></pre></td></tr></table></figure>
<h4 id="u89C6_u9891_u64AD_u653E"><a href="#u89C6_u9891_u64AD_u653E" class="headerlink" title="视频播放"></a>视频播放</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">install</span> vlc vlc-<span class="keyword">plugin</span>-pulse mozilla-<span class="keyword">plugin</span>-vlc</span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> mplayer smplayer</span></span><br></pre></td></tr></table></figure>
<h4 id="u4E0B_u8F7D_u5DE5_u5177"><a href="#u4E0B_u8F7D_u5DE5_u5177" class="headerlink" title="下载工具"></a>下载工具</h4><p>最常见的wget和aria2c</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install wget aria2</span><br></pre></td></tr></table></figure>
<p>推荐用下面的Firefox插件</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:plushuang-tw/uget-devel</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install uget</span><br></pre></td></tr></table></figure>
<p>特别推荐使用优蛋 linux版，很好用<br>下载地址</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//bbs.ylmf.net/forum.php?mod=viewthread&amp;amp;tid=1916551</span></span><br></pre></td></tr></table></figure>
<p>当然，用Firefox的话，有最强大的下载插件：DownThemAll，最好的下载工具</p>
<h4 id="u5B89_u88C5Ubuntu_Tweak"><a href="#u5B89_u88C5Ubuntu_Tweak" class="headerlink" title="安装Ubuntu Tweak"></a>安装Ubuntu Tweak</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:tualatrix/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ubuntu-tweak</span><br></pre></td></tr></table></figure>
<h2 id="u684C_u9762_u7F8E_u5316"><a href="#u684C_u9762_u7F8E_u5316" class="headerlink" title="桌面美化"></a>桌面美化</h2><h4 id="u5B89_u88C5Faenza_u56FE_u6807_u548Cequinox_u4E3B_u9898"><a href="#u5B89_u88C5Faenza_u56FE_u6807_u548Cequinox_u4E3B_u9898" class="headerlink" title="安装Faenza图标和equinox主题"></a>安装Faenza图标和equinox主题</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:tiheum/equinox</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install faenza-icon-theme  gtk2-engines-equinox equinox-theme</span><br></pre></td></tr></table></figure>
<h4 id="u5B89_u88C5elementary_u4E3B_u9898"><a href="#u5B89_u88C5elementary_u4E3B_u9898" class="headerlink" title="安装elementary主题"></a>安装elementary主题</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:elementaryart/elementarydesktop</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install elementary-theme elementary-icon-theme elementary-wallpapers</span><br></pre></td></tr></table></figure>
<h4 id="u5B89_u88C5nautilus-elementary"><a href="#u5B89_u88C5nautilus-elementary" class="headerlink" title="安装nautilus-elementary"></a>安装nautilus-elementary</h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:am-monkeyd/nautilus-elementary-ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure>
<p>打开/usr/share/themes/.gtkrc，注释掉这一行： <code>#include &quot;apps/nautilus-elementary.rc&quot;</code><br>重启 nautilus -q</p>
<h4 id="u5B89_u88C5_u7CFB_u7EDF_u72B6_u6001_u6307_u793A_u5668"><a href="#u5B89_u88C5_u7CFB_u7EDF_u72B6_u6001_u6307_u793A_u5668" class="headerlink" title="安装系统状态指示器"></a>安装系统状态指示器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="comment">//mh21.de/temp/indicator-multiload_0.1-0~5_i386.deb</span></span><br><span class="line">sudo dpkg -i indicator-multiload_0<span class="number">.1</span>-<span class="number">0</span>~<span class="number">5</span>_i386.deb</span><br></pre></td></tr></table></figure>
<h2 id="u5F00_u53D1_u73AF_u5883_u914D_u7F6E"><a href="#u5F00_u53D1_u73AF_u5883_u914D_u7F6E" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><h4 id="u5B89_u88C5_u57FA_u672C_u5F00_u53D1_u73AF_u5883_u548C_u7248_u672C_u5DE5_u5177"><a href="#u5B89_u88C5_u57FA_u672C_u5F00_u53D1_u73AF_u5883_u548C_u7248_u672C_u5DE5_u5177" class="headerlink" title="安装基本开发环境和版本工具"></a>安装基本开发环境和版本工具</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">sudo</span> apt-<span class="preprocessor">get</span> install <span class="keyword">build-essential </span>autoconf automake1.<span class="number">9</span> cvs <span class="keyword">subversion </span>git mercurial</span><br></pre></td></tr></table></figure>
<h4 id="u5B89_u88C5JDK"><a href="#u5B89_u88C5JDK" class="headerlink" title="安装JDK"></a>安装JDK</h4><p>需要在更新管理器里启用第三方软件源</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install <span class="keyword">sun</span>-java6-jdk <span class="keyword">sun</span>-java6-plugin</span><br></pre></td></tr></table></figure>
<p>或者通过ppa安装</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:ferramroberto/java</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install sun-java6-jdk sun-java6-plugin</span><br></pre></td></tr></table></figure>
<h4 id="u914D_u7F6EJDK"><a href="#u914D_u7F6EJDK" class="headerlink" title="配置JDK"></a>配置JDK</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="operator"><span class="keyword">update</span>-alternatives <span class="comment">--config java</span></span></span><br></pre></td></tr></table></figure>
<p>解决Java程序乱码<br>注释掉此文件的所有行：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="class"><span class="keyword">lib</span>/<span class="title">jvm</span>/<span class="title">java</span>-6-<span class="title">sun</span>/<span class="title">jre</span>/<span class="title">lib</span>/<span class="title">fonts</span>/<span class="title">fonts</span>.<span class="title">dir</span></span></span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/wiki.ubuntu.org.cn/</span><span class="constant">Java</span>%<span class="constant">E5</span>%<span class="constant">AE</span>%<span class="number">89</span>%<span class="constant">E8</span>%<span class="constant">A3</span>%<span class="number">85</span>%<span class="constant">E9</span>%<span class="number">85</span>%<span class="number">8</span>D%<span class="constant">E7</span>%<span class="constant">BD</span>%<span class="constant">AE</span></span><br></pre></td></tr></table></figure>
<h4 id="u5B89_u88C5Android_u5F00_u53D1_u73AF_u5883"><a href="#u5B89_u88C5Android_u5F00_u53D1_u73AF_u5883" class="headerlink" title="安装Android开发环境"></a>安装Android开发环境</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install git-core gnupg flex bison gperf build-essential zip curl zlib1g-<span class="built_in">dev</span> libc6-<span class="built_in">dev</span> x11proto-core-<span class="built_in">dev</span> libx11-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>
<h4 id="u5B89_u88C5Eclipse"><a href="#u5B89_u88C5Eclipse" class="headerlink" title="安装Eclipse"></a>安装Eclipse</h4><p>不建议直接使用源安装，不好控制<br>建议直接去官网下载压缩包，解压即可使用，如果放在/usr/local 或 /opt 分区的话，为使用方便，需要chown root:root -R  一下，不过强烈建议直接解压放在/home分区的某个目录，使用最方便，不用担心莫名其妙的权限问题<br>添加桌面启动器和面板启动器可以参考这里：<br><a href="http://www.5dlinux.com/article/1/2008/linux_15330.html" target="_blank" rel="external">http://www.5dlinux.com/article/1/2008/linux_15330.html</a><br>我的方法是直接 ln -s一个放在~/bin目录里</p>
<h4 id="u5B89_u88C5Ruby"><a href="#u5B89_u88C5Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h4><p>系统自带的是1.8.7，需要使用1.9.2的话必须自己编译安装，不过无论使用哪个版本，强烈推荐使用rvm安装和配置ruby环境，与系统隔离，使用和卸载都方便，官网的安装教程非常详细，推荐安装在～/目录</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash  &lt; <span class="list">(<span class="keyword">curl</span> -s https<span class="keyword">://rvm</span>.beginrescueend.com/install/rvm)</span></span><br></pre></td></tr></table></figure>
<p>在.bashrc的最后加入</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[[ -s <span class="string">"$HOME/.rvm/scripts/rvm"</span> ]] &amp;amp;&amp;amp; . <span class="string">"$HOME/.rvm/scripts/rvm"</span></span><br><span class="line">rvm  install <span class="number">1.9</span><span class="number">.2</span>-p180</span><br><span class="line">rvm <span class="number">1.9</span><span class="number">.2</span>-p180</span><br><span class="line">rvm --<span class="keyword">default</span> use <span class="number">1.9</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<p>检查安装情况 <code>which ruby</code></p>
<h4 id="u5B89_u88C5Eclipse_u63D2_u4EF6"><a href="#u5B89_u88C5Eclipse_u63D2_u4EF6" class="headerlink" title="安装Eclipse插件"></a>安装Eclipse插件</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="constant">ADT</span>：</span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/dl-ssl.google.com/android</span><span class="regexp">/eclipse/</span></span><br><span class="line"><span class="symbol">https:</span>/<span class="regexp">/dl-ssl.google.com/android</span><span class="regexp">/eclipse/</span></span><br></pre></td></tr></table></figure>
<h2 id="u5176_u5B83_u914D_u7F6E"><a href="#u5176_u5B83_u914D_u7F6E" class="headerlink" title="其它配置"></a>其它配置</h2><h4 id="u914D_u7F6EEvolution_u4F7F_u7528GMail"><a href="#u914D_u7F6EEvolution_u4F7F_u7528GMail" class="headerlink" title="配置Evolution使用GMail"></a>配置Evolution使用GMail</h4><p>imap配置里用户名必须是包含@gmail.com的，要不然无法链接，而且很bt的是根本没有提示和错误说明 #ubuntu 还有imap服务器必须加端口号993 加密方式为SSL</p>
<h4 id="u8F6F_u4EF6_u5305_u5907_u4EFD_u8FD8_u539F"><a href="#u8F6F_u4EF6_u5305_u5907_u4EFD_u8FD8_u539F" class="headerlink" title="软件包备份还原"></a>软件包备份还原</h4><p>备份</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar cizvf apt-backup.tar.gz <span class="regexp">/var/</span>cache<span class="regexp">/apt/</span>archives --<span class="keyword">exclude</span>=<span class="regexp">/var/</span>cache<span class="regexp">/apt/</span>archives<span class="regexp">/partial/</span>* --<span class="keyword">exclude</span>=<span class="regexp">/var/</span>cache<span class="regexp">/apt/</span>archives<span class="regexp">/lock</span></span><br></pre></td></tr></table></figure>
<p>还原</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get <span class="operator"><span class="keyword">update</span> &amp;amp;</span>&amp;amp; sudo tar xzvf <span class="operator"><span class="keyword">backup</span>.tar.gz -<span class="keyword">C</span> /</span></span><br></pre></td></tr></table></figure>
<h2 id="u5176_u5B83_u8F6F_u4EF6"><a href="#u5176_u5B83_u8F6F_u4EF6" class="headerlink" title="其它软件"></a>其它软件</h2><h4 id="u56FE_u5F62_u65B9_u5F0F_u7F16_u8F91_u542F_u52A8_u83DC_u5355"><a href="#u56FE_u5F62_u65B9_u5F0F_u7F16_u8F91_u542F_u52A8_u83DC_u5355" class="headerlink" title="图形方式编辑启动菜单"></a>图形方式编辑启动菜单</h4><p>安装Grub Customizer</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="instruction"> add-apt-repository </span>ppa:danielrichter2007/grub-customizer</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install grub-customizer</span><br></pre></td></tr></table></figure>
<h4 id="u5B89_u88C5_u548C_u914D_u7F6Eopenvpn"><a href="#u5B89_u88C5_u548C_u914D_u7F6Eopenvpn" class="headerlink" title="安装和配置openvpn"></a>安装和配置openvpn</h4><p>安装openvpn</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openvpn</span><br><span class="line"></span><br><span class="line">复制配置文件到 <span class="regexp">/etc/</span>openvpn/ ，添加权限</span><br><span class="line">cd <span class="regexp">/etc/</span>openvpn/</span><br><span class="line">sudo chmod +x *</span><br><span class="line">连接openvpn</span><br><span class="line">sudo openvpn --config <span class="regexp">/etc/</span>openvpn/client.ovp --script-security <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>出现下列字样表示连接成功</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">openvpn</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">config</span> <span class="comment">/etc/openvpn/client</span><span class="string">.</span><span class="comment">ovp</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">script</span><span class="literal">-</span><span class="comment">security</span> <span class="comment">2</span></span><br></pre></td></tr></table></figure>
<p>使用SSH Tunneling Proxy</p>
<p><a href="http://wiki.wowubuntu.com/blog/ubuntu_ssh_tunneling" target="_blank" rel="external">http://wiki.wowubuntu.com/blog/ubuntu_ssh_tunneling</a><br><a href="http://wiki.wowubuntu.com/blog/gstm" target="_blank" rel="external">http://wiki.wowubuntu.com/blog/gstm</a></p>
<h2 id="u6545_u969C_u548C_u95EE_u9898"><a href="#u6545_u969C_u548C_u95EE_u9898" class="headerlink" title="故障和问题"></a>故障和问题</h2><p>暂无</p>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>2011.05.06 Ver 1.0</li>
<li>2011.05.11 Ver 1.1</li>
<li>2011.05.12 Ver 1.2</li>
<li>2011.05.29 Ver 1.3 增加Dropbox安装配置，删除过时内容  </li>
]]>
    </summary>
    
      <category term="Ubuntu" scheme="http://blog.mcxiaoke.com/tags/Ubuntu/"/>
    
      <category term="Linux" scheme="http://blog.mcxiaoke.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android XML Shape使用入门]]></title>
    <link href="http://blog.mcxiaoke.com/2011/05/15/android-xml-shape-get-started/"/>
    <id>http://blog.mcxiaoke.com/2011/05/15/android-xml-shape-get-started/</id>
    <published>2011-05-15T10:12:00.000Z</published>
    <updated>2015-07-07T08:46:57.000Z</updated>
    <content type="html"><![CDATA[<p>XML<br>Drawable是google为android定义的一种声明式图形文件格式，类似于SVG，但更简单，官方文档非常少，网上有人整理了一份文档，值得细看：</p>
<p><a href="http://idunnolol.com/android/drawables.html" target="_blank" rel="external">Android Drawable XML<br>Documentation</a></p>
<p>下面是一个简单的使用例子：</p>
<p>Activity代码  </p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.<span class="type">Activity</span>;  </span><br><span class="line"><span class="keyword">import</span> android.os.<span class="type">Bundle</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">DrawableTest</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">Activity</span> &#123;</span>  </span><br><span class="line"><span class="annotation">@Override</span>  </span><br><span class="line">public void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;  </span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">setContentView(<span class="type">R</span>.layout.main);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>布局文件  </p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </span><br><span class="line">&lt;LinearLayout</span><br><span class="line">xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line"><span class="string">android:</span>orientation=<span class="string">"vertical"</span> <span class="string">android:</span>layout_width=<span class="string">"fill_parent"</span>  </span><br><span class="line"><span class="string">android:</span>layout_height=<span class="string">"fill_parent"</span>&gt;  </span><br><span class="line">&lt;TextView <span class="string">android:</span>textSize=<span class="string">"16sp"</span></span><br><span class="line"><span class="string">android:</span>layout_width=<span class="string">"fill_parent"</span>  </span><br><span class="line"><span class="string">android:</span>layout_height=<span class="string">"wrap_content"</span> <span class="string">android:</span>text=<span class="string">"@string/hello"</span>  </span><br><span class="line"><span class="string">android:</span>background=<span class="string">"@drawable/rect_gradient_linear"</span> /&gt;  </span><br><span class="line">&lt;TextView <span class="string">android:</span>textSize=<span class="string">"16sp"</span></span><br><span class="line"><span class="string">android:</span>layout_width=<span class="string">"fill_parent"</span>  </span><br><span class="line"><span class="string">android:</span>layout_height=<span class="string">"wrap_content"</span> <span class="string">android:</span>text=<span class="string">"@string/hello"</span>  </span><br><span class="line"><span class="string">android:</span>background=<span class="string">"@drawable/oval_gradient_linear"</span> /&gt;  </span><br><span class="line">&lt;TextView <span class="string">android:</span>textSize=<span class="string">"16sp"</span></span><br><span class="line"><span class="string">android:</span>layout_width=<span class="string">"fill_parent"</span>  </span><br><span class="line"><span class="string">android:</span>layout_height=<span class="string">"wrap_content"</span> <span class="string">android:</span>text=<span class="string">"@string/hello"</span>  </span><br><span class="line"><span class="string">android:</span>background=<span class="string">"@drawable/rect_solid_stroke"</span> /&gt;  </span><br><span class="line">&lt;TextView <span class="string">android:</span>textSize=<span class="string">"16sp"</span></span><br><span class="line"><span class="string">android:</span>layout_width=<span class="string">"fill_parent"</span>  </span><br><span class="line"><span class="string">android:</span>layout_height=<span class="string">"wrap_content"</span> <span class="string">android:</span>text=<span class="string">"@string/hello"</span>  </span><br><span class="line"><span class="string">android:</span>background=<span class="string">"@drawable/rect_solid_corners"</span> /&gt;  </span><br><span class="line">&lt;/LinearLayout&gt;</span><br></pre></td></tr></table></figure>
<p>Shapre使用实例，共四个：  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">shape</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line"><span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">gradient</span> <span class="attribute">android:startColor</span>=<span class="value">"#ffff0000"</span></span><br><span class="line"><span class="attribute">android:endColor</span>=<span class="value">"#FF4488ee"</span>  </span><br><span class="line"><span class="attribute">android:type</span>=<span class="value">"linear"</span> <span class="attribute">android:angle</span>=<span class="value">"270"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">padding</span> <span class="attribute">android:left</span>=<span class="value">"2dp"</span> <span class="attribute">android:top</span>=<span class="value">"2dp"</span> <span class="attribute">android:right</span>=<span class="value">"2dp"</span>  </span><br><span class="line"><span class="attribute">android:bottom</span>=<span class="value">"2dp"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span>  </span><br><span class="line">[/xml]  </span><br><span class="line">[xml]  </span><br><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">shape</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line"><span class="attribute">android:shape</span>=<span class="value">"oval"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">gradient</span> <span class="attribute">android:startColor</span>=<span class="value">"#FFaa6622"</span></span><br><span class="line"><span class="attribute">android:endColor</span>=<span class="value">"#FF2288ee"</span>  </span><br><span class="line"><span class="attribute">android:type</span>=<span class="value">"linear"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">padding</span> <span class="attribute">android:left</span>=<span class="value">"2dp"</span> <span class="attribute">android:top</span>=<span class="value">"2dp"</span> <span class="attribute">android:right</span>=<span class="value">"2dp"</span>  </span><br><span class="line"><span class="attribute">android:bottom</span>=<span class="value">"2dp"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">shape</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line"><span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#ffff0000"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">padding</span> <span class="attribute">android:left</span>=<span class="value">"5dp"</span> <span class="attribute">android:top</span>=<span class="value">"2dp"</span> <span class="attribute">android:right</span>=<span class="value">"2dp"</span>  </span><br><span class="line"><span class="attribute">android:bottom</span>=<span class="value">"5dp"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">stroke</span> <span class="attribute">android:width</span>=<span class="value">"2dp"</span> <span class="attribute">android:color</span>=<span class="value">"#ffffffff"</span></span><br><span class="line"><span class="attribute">android:dashGap</span>=<span class="value">"5dp"</span>  </span><br><span class="line"><span class="attribute">android:dashWidth</span>=<span class="value">"10dp"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">shape</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>  </span><br><span class="line"><span class="attribute">android:shape</span>=<span class="value">"rectangle"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">solid</span> <span class="attribute">android:color</span>=<span class="value">"#8800ff00"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">padding</span> <span class="attribute">android:left</span>=<span class="value">"5dp"</span> <span class="attribute">android:top</span>=<span class="value">"5dp"</span> <span class="attribute">android:right</span>=<span class="value">"5dp"</span>  </span><br><span class="line"><span class="attribute">android:bottom</span>=<span class="value">"5dp"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">corners</span> <span class="attribute">android:radius</span>=<span class="value">"15dp"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面是系统源码里的例子，文件为：source/frameworks/base/core/res/res/drawable/progress_horizontal.xml  </p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layer-list</span></span><br><span class="line"><span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:id</span>=<span class="value">"@android:id/background"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">shape</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">corners</span> <span class="attribute">android:radius</span>=<span class="value">"5dip"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">gradient</span>  </span><br><span class="line"><span class="attribute">android:startColor</span>=<span class="value">"#ff9d9e9d"</span>  </span><br><span class="line"><span class="attribute">android:centerColor</span>=<span class="value">"#ff5a5d5a"</span>  </span><br><span class="line"><span class="attribute">android:centerY</span>=<span class="value">"0.75"</span>  </span><br><span class="line"><span class="attribute">android:endColor</span>=<span class="value">"#ff747674"</span>  </span><br><span class="line"><span class="attribute">android:angle</span>=<span class="value">"270"</span>  </span><br><span class="line">/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:id</span>=<span class="value">"@android:id/secondaryProgress"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">clip</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">shape</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">corners</span> <span class="attribute">android:radius</span>=<span class="value">"5dip"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">gradient</span>  </span><br><span class="line"><span class="attribute">android:startColor</span>=<span class="value">"#80ffd300"</span>  </span><br><span class="line"><span class="attribute">android:centerColor</span>=<span class="value">"#80ffb600"</span>  </span><br><span class="line"><span class="attribute">android:centerY</span>=<span class="value">"0.75"</span>  </span><br><span class="line"><span class="attribute">android:endColor</span>=<span class="value">"#a0ffcb00"</span>  </span><br><span class="line"><span class="attribute">android:angle</span>=<span class="value">"270"</span>  </span><br><span class="line">/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">clip</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">item</span> <span class="attribute">android:id</span>=<span class="value">"@android:id/progress"</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">clip</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">shape</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">corners</span> <span class="attribute">android:radius</span>=<span class="value">"5dip"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="title">gradient</span>  </span><br><span class="line"><span class="attribute">android:startColor</span>=<span class="value">"#ffffd300"</span>  </span><br><span class="line"><span class="attribute">android:centerColor</span>=<span class="value">"#ffffb600"</span>  </span><br><span class="line"><span class="attribute">android:centerY</span>=<span class="value">"0.75"</span>  </span><br><span class="line"><span class="attribute">android:endColor</span>=<span class="value">"#ffffcb00"</span>  </span><br><span class="line"><span class="attribute">android:angle</span>=<span class="value">"270"</span>  </span><br><span class="line">/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">shape</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">clip</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可供参考的资料：<br>Layout secrets: “layer-list” and “include”<br><a href="http://android.amberfog.com/?p=9" target="_blank" rel="external">http://android.amberfog.com/?p=9</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>XML<br>Drawable是google为android定义的一种声明式图形文件格式，类似于SVG，但更简单，官方文档非常少，网上有人整理了一份文档，值得细看：</p>
<p><a href="http://idunnolol.com/android/drawables]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="Drawable" scheme="http://blog.mcxiaoke.com/tags/Drawable/"/>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发杂记（一）]]></title>
    <link href="http://blog.mcxiaoke.com/2011/02/26/android-dev-notes-01/"/>
    <id>http://blog.mcxiaoke.com/2011/02/26/android-dev-notes-01/</id>
    <published>2011-02-26T08:53:00.000Z</published>
    <updated>2015-07-07T08:44:55.000Z</updated>
    <content type="html"><![CDATA[<p>这些是这半年做Android开发的小部分技巧记录，摘录自我的Tweets，大部分没有发在Twitter上的以后想起来了再记一下</p>
<ul>
<li><p>android:layout_alignLeft 指该控件距离边父控件的边距，android:paddingLeft 指该控件内部内容，如文本距离该控件的边距.当按钮分别设置以上两个属性时，效果不一样的 android:paddingLeft=”30px”，按钮上设置的内容（例如图片）离按钮左边边界30个像素 android:layout_marginLeft=”30px”，整个按钮离左边设置的内容30个像素</p>
</li>
<li><p>Activity中添加 <code>android:windowSoftInputMode=”adjustPan”</code> 就可以自适应键盘的显示与隐藏</p>
</li>
</ul>
<ol>
<li>android:listSelector的值可以是一个Drawable，也可以是一个颜色值</li>
</ol>
<ul>
<li><p>ListView的默认背景色是#FF191919，如果不做修改，而且设置了背景图片的话，那么拖动时就会出现黑色背景，解决办法是设置 <code>android:cacheColorHint</code><br>为#00000000</p>
</li>
<li><p>Android截屏代码： <code>view.setDrawingCacheEnabled(true);Bitmap bp =
view.getDrawingCache();</code></p>
</li>
<li><p>当ListView中要显示的数据集合发生变化时，如集合中增删数据，这时需要刷新UI以响应数据变化，可调用adapter的notifyDataSetChanged();方法来刷新界面</p>
</li>
<li><p>FrameLayout是最简单的一个布局对象。在它里面的的所有显示对象都将固定在屏幕的左上角，不能指定位置，但允许有多个显示对象，只是后一个会直接覆盖在前一个之上显示，会把前面的组件部分或全部挡住</p>
</li>
<li><p>View类默认提供的是一个100*100大小的空白空间，自定义View必须重写OnDraw()和onMeasure()方法，否则父控件无法得知你自定义的View的尺寸</p>
</li>
<li><p>解决SeekBar下边显示不全的办法：将是layout_height为warp_content，再设置适当的minHeight和maxHeight值</p>
</li>
<li><p>View设置背景透明的方法：<code>View v = findViewById(R.id.content);</code> //找到你要设透明背景的layout 的id 然后 <code>v.getBackground().setAlpha(100);</code> //0~255透明度值</p>
</li>
<li><p>由于触摸模式和普通模式切换的存在，在程序中不能依赖焦点和选中状态，因为某一时刻不一定存在焦点和/或选中状态</p>
</li>
<li><p>设置WebView的缩放需要设置一下 <code>browser.getSettings().setUseWideViewPort(true);</code></p>
</li>
<li><p>去掉标题栏titleBar的方法：<code>requestWindowFeature(Window.FEATURE_NO_TITLE);</code></p>
</li>
<li><p>全屏背景透明的设置方法：  <code>Activity：android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar.Fullscreen&quot;</code></p>
</li>
<li><p>建议所有Android开发者升级ADT到最近的9.0，这个版本修复了以前Eclipse的logcat日志输出中不支持中文的BUG(Issue<br>1590)，现在采用UTF8编码，支持所有Unicode字符了</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这些是这半年做Android开发的小部分技巧记录，摘录自我的Tweets，大部分没有发在Twitter上的以后想起来了再记一下</p>
<ul>
<li><p>android:layout_alignLeft 指该控件距离边父控件的边距，android:paddingLef]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="Tips" scheme="http://blog.mcxiaoke.com/tags/Tips/"/>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android IntentService使用简介]]></title>
    <link href="http://blog.mcxiaoke.com/2011/02/01/android-intentservice-getting-started/"/>
    <id>http://blog.mcxiaoke.com/2011/02/01/android-intentservice-getting-started/</id>
    <published>2011-02-01T14:46:00.000Z</published>
    <updated>2015-07-07T08:46:45.000Z</updated>
    <content type="html"><![CDATA[<p>春节放假有点自己的时间，准备抽空做个饭否上传照片的工具，其中上传功能需要用到后台任务，Android上的后台任务主要有三种实现方式，一是按照常规的Java方式，自己写线程，二是使用SDK封装好的后台任务类AsyncTask，三是使用Service，线程和AsyncTask都是和Activity的生命周期绑定的，而Service有自己的独立生命周期，考虑到以后的扩展和代码的清晰，决定使用Service，看到国外的博客和Google<br>Groups里面都推荐使用IntentService，网上搜了一下，几乎没有中文的资料，于是决定记录一下学习使用IntentService的笔记。</p>
<p>IntentService的位置是android.app.IntentService，官方文档的介绍我翻译一下：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntentService <span class="keyword">is</span> a base <span class="type">class</span> <span class="keyword">for</span> Services <span class="keyword">that</span> handle asynchronous requests (expressed <span class="keyword">as</span> Intents) <span class="function_start"><span class="keyword">on</span></span> demand. Clients send requests <span class="keyword">through</span> startService(Intent) calls; <span class="keyword">the</span> service <span class="keyword">is</span> started <span class="keyword">as</span> needed, handles each Intent <span class="keyword">in</span> turn using a worker thread, <span class="keyword">and</span> stops itself when <span class="keyword">it</span> runs <span class="keyword">out of</span> work.</span><br></pre></td></tr></table></figure>
<p>IntentService是一个用于按需处理异步请求的Service基类，调用方通过<br>startService(Intent)启动服务，IntentService为每一个Intent开启一个单独的工作线程，并且在任务完成时自动终止服务。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This <span class="string">"work queue processor"</span> pattern <span class="keyword">is</span> commonly used <span class="keyword">to</span> offload tasks <span class="keyword">from</span> an <span class="type">application</span>'s main thread. The IntentService <span class="type">class</span> exists <span class="keyword">to</span> simplify this pattern <span class="keyword">and</span> take care <span class="keyword">of</span> <span class="keyword">the</span> mechanics. To use <span class="keyword">it</span>, extend IntentService <span class="keyword">and</span> implement onHandleIntent(Intent). IntentService will receive <span class="keyword">the</span> Intents, <span class="command">launch</span> a worker thread, <span class="keyword">and</span> stop <span class="keyword">the</span> service <span class="keyword">as</span> appropriate.</span><br></pre></td></tr></table></figure>
<p>这种“工作队列处理器”模式通常用于某个程序主线程之外的后台任务。IntentService类简化了这种机制。要使用这种工作队列模式，只使用继承IntentService并实现onHandleIntent(Intent)方法。IntentService会接受Intents，启动工作线程，并在合适的时候终止服务。</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">All requests are handled <span class="keyword">on</span> a <span class="built_in">single</span> worker thread -- they may <span class="keyword">take</span> <span class="keyword">as</span> <span class="built_in">long</span> <span class="keyword">as</span> necessary (<span class="keyword">and</span> will <span class="keyword">not</span> block the application<span class="comment">'s main loop), but only one request will be processed at a time.</span></span><br></pre></td></tr></table></figure>
<p>文档的最后说，所有的请求都由一个单独的线程处理，它们可以占用任意长的时间（不会造成主线程阻塞），但是同一时间智慧处理一个请求。我的理解是先进先出的队列模式。</p>
<p>下面首先看看我的示例代码，这个是写的饭否照片上传的代码，</p>
<pre><code>:::java
package com.mcxiaoke.fanfou.photo;

import java.io.File;  
import android.app.IntentService;  
import android.content.Intent;  
import android.os.IBinder;  
import android.util.Log;

public final class PhotoUploadService extends IntentService {  
@Override  
public IBinder onBind(Intent intent) {  
Log.d(tag, &quot;onBind()&quot;);  
return super.onBind(intent);  
}

@Override  
public void onCreate() {  
Log.d(tag, &quot;onCreate()&quot;);  
super.onCreate();  
}

@Override  
public void onDestroy() {  
Log.d(tag, &quot;onDestroy()&quot;);  
super.onDestroy();  
}

@Override  
public void onStart(Intent intent, int startId) {  
Log.d(tag, &quot;onStart()&quot;);  
super.onStart(intent, startId);  
}

@Override  
public int onStartCommand(Intent intent, int flags, int startId) {  
Log.d(tag, &quot;onStartCommand()&quot;);  
return super.onStartCommand(intent, flags, startId);  
}

@Override  
public void setIntentRedelivery(boolean enabled) {  
Log.d(tag, &quot;setIntentRedelivery()&quot;);  
super.setIntentRedelivery(enabled);  
}

private final static String tag=&quot;PhotoUploadService&quot;;

// public PhotoUploadService(String name) {  
// super(name);  
// Log.d(tag, &quot;PhotoUploadService()&quot;);  
// }

public PhotoUploadService() {  
super(&quot;PhotoUploadService&quot;);  
Log.d(tag, &quot;PhotoUploadService()&quot;);  
}

@Override  
protected void onHandleIntent(Intent intent) {  
Log.d(tag, &quot;onHandleIntent()&quot;);  
File photo=new File(intent.getStringExtra(&quot;photo&quot;));  
FanfouApi api=new FanfouApi(&quot;username&quot;, &quot;password&quot;);  
api.uploadPhoto(photo, &quot;upload photo use service test.&quot;);

}  
}  
</code></pre><p>你要进行的后台任务写在onHandleIntent方法里就可以了，上面那个Override的方式都是我用于打印调试信息的，都可以不用重写。这里说一下IntentService的生命周期，根据Logcat打印的消息，那几个OnXXX的执行顺序从前到后依次是：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">PhotoUploadService</span><span class="params">()</span></span> -- 构造函数  </span><br><span class="line"><span class="function"><span class="title">onCreate</span><span class="params">()</span></span> -- 只在Service第一次启动时调用  </span><br><span class="line"><span class="function"><span class="title">onStartCommand</span><span class="params">()</span></span> -- 每次调用startService时都会调用这个方法  </span><br><span class="line"><span class="function"><span class="title">onStart</span><span class="params">()</span></span> -- SDK将这个方法标记为过时的，用<span class="function"><span class="title">onStartCommand</span><span class="params">()</span></span>替代  </span><br><span class="line"><span class="function"><span class="title">onHandleIntent</span><span class="params">()</span></span> -- 要做的任务都写在这个方法里  </span><br><span class="line"><span class="function"><span class="title">onDestroy</span><span class="params">()</span></span> -- 服务终止时调用</span><br></pre></td></tr></table></figure>
<p>关于继承IntentService，构造函数需要注意一个地方，Eclipse默认生成的构造函数是  </p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PhotoUploadService</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">super</span>(name);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这个默认构造函数的话会报一个运行时错误： <code>java.lang.InstantiationException</code>，在Google Groups里找到了解决办法，继承IntentService的类必须有一个public的无参的构造函数，将上面Eclipse自动生成的构造函数改为下面这样的就可以了：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PhotoUploadService</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="keyword">super</span>(<span class="string">"someone"</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为什么要这样改，看IntentService构造函数的源码：  </p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">IntentService</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">super</span>();  </span><br><span class="line">mName = name;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SDK文档里说构造函数里面的服务名字只在调试时有用，可以随便写一个名字。</p>
<p>另一个需要特别指出的时，在onHandleIntent里不需要自己处理线程，或者新启线程，IntentService默认会为队列中的任务启动后台线程，源码中的实现是这样的：  </p>
<pre><code>:::java
private final class ServiceHandler extends Handler {  
public ServiceHandler(Looper looper) {  
super(looper);  
}

@Override  
public void handleMessage(Message msg) {  
onHandleIntent((Intent)msg.obj);  
stopSelf(msg.arg1);  
}  
}

@Override  
public void onCreate() {  
super.onCreate();  
HandlerThread thread = new HandlerThread(&quot;IntentService[&quot; + mName +
&quot;]&quot;);  
thread.start();

mServiceLooper = thread.getLooper();  
mServiceHandler = new ServiceHandler(mServiceLooper);  
}  
</code></pre><p>看源码可以得知onHanldeIntent()是在新的后台线程HandlerThread里执行的，所以不需要要我们自己新开线程。</p>
<p>参考资料：  </p>
<p><a href="http://androidappdocs.appspot.com/reference/android/app/IntentService.html" target="_blank" rel="external">IntentService</a>  </p>
<p><a href="http://androidappdocs.appspot.com/reference/android/app/Service.html" target="_blank" rel="external">Service</a><br><a href="http://stackoverflow.com/questions/3197335/android-restful-api-service" target="_blank" rel="external">Android: restful API<br>service</a><br><a href="https://groups.google.com/forum/#!topic/android-developers/YTXqvKP526w" target="_blank" rel="external">IntentService instantiation<br>exception</a><br><a href="http://stackoverflow.com/questions/3817272/android-design-considerations-asynchtask-vs-service-intentservice" target="_blank" rel="external">android design considerations: AsynchTask vs<br>Service</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>春节放假有点自己的时间，准备抽空做个饭否上传照片的工具，其中上传功能需要用到后台任务，Android上的后台任务主要有三种实现方式，一是按照常规的Java方式，自己写线程，二是使用SDK封装好的后台任务类AsyncTask，三是使用Service，线程和AsyncTask都]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="Service" scheme="http://blog.mcxiaoke.com/tags/Service/"/>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用MinGW编译libcurl静态库]]></title>
    <link href="http://blog.mcxiaoke.com/2010/12/12/compile-and-use-libcurl-in-mingw-win32-how-to/"/>
    <id>http://blog.mcxiaoke.com/2010/12/12/compile-and-use-libcurl-in-mingw-win32-how-to/</id>
    <published>2010-12-12T12:47:00.000Z</published>
    <updated>2015-07-07T08:47:18.000Z</updated>
    <content type="html"><![CDATA[<p>libcurl<br>7.21以后的版本在Windows下的编译比较简单，自带了MinGW和VC环境的Makefile文件，首先去Curl官网下载源代码：<br><a href="http://curl.haxx.se/download.html" target="_blank" rel="external">http://curl.haxx.se/download.html</a>，</p>
<p>任选一个下载即可，推荐这个：<br><a href="http://curl.haxx.se/download/curl-7.21.2.tar.gz" target="_blank" rel="external">curl-7.21.2.tar.gz</a><br>下载完成后解压开，打开命令行进入curl源码目录，(在此之前请先设置好MinGW的环境变量)：  </p>
<pre><code>cd curl-7.21.2 
</code></pre><p>编译libcurl库文件：  </p>
<pre><code>cd lib  
make -f Makefile.m32  
</code></pre><p>等待编译完成即可<br>编译curl可执行文件： </p>
<pre><code>cd ../src  
make -f Makefile.m32  
</code></pre><p>一会儿就编译完成了</p>
<p>编译完成后，我们需要复制include头文件和库文件到一个目录供程序开发用 </p>
<ol>
<li>新建curllib目录  </li>
<li>新建curllib/include目录，将源代码include目录里的curl文件夹复制到curllib/include目录，这些是使用libcurl需要的头文件  </li>
<li>新建curllib/lib目录，将源代码lib目录里编译好的库文件libcurl.a，libcurldll.a，libcurl.dll复制到curllib目录  </li>
<li>将MinGW安装目录下lib文件夹里的libwldap32.a和libws2_32.a复制到curllib/lib目录</li>
</ol>
<p>至此，curllib就是我们开发中要使用到的libcurl的全部文件，下面新建一个测试程序，假设文件名为curltest.c，代码如下：</p>
<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="command">\#</span>include <span class="command">\&lt;</span>stdio.h<span class="command">\&gt;</span>  </span><br><span class="line"><span class="command">\#</span>include <span class="command">\&lt;</span>curl/curl.h<span class="command">\&gt;</span></span><br><span class="line"></span><br><span class="line">int main(void)  </span><br><span class="line"><span class="special">&#123;</span>  </span><br><span class="line">CURL <span class="command">\*</span>curl;  </span><br><span class="line">CURLcode res;</span><br><span class="line"></span><br><span class="line">curl = curl<span class="command">\_</span>easy<span class="command">\_</span>init();  </span><br><span class="line">if(curl) <span class="special">&#123;</span>  </span><br><span class="line">curl<span class="command">\_</span>easy<span class="command">\_</span>setopt(curl, CURLOPT<span class="command">\_</span>URL, "www.google.com");  </span><br><span class="line">res = curl<span class="command">\_</span>easy<span class="command">\_</span>perform(curl);</span><br><span class="line"></span><br><span class="line">/<span class="command">\*</span> always cleanup <span class="command">\*</span>/  </span><br><span class="line">curl<span class="command">\_</span>easy<span class="command">\_</span>cleanup(curl);  </span><br><span class="line"><span class="special">&#125;</span>  </span><br><span class="line">return 0;  </span><br><span class="line"><span class="special">&#125;</span></span><br></pre></td></tr></table></figure>
<p>** 方法一、命令行编译使用licurl的程序</p>
<p>假设测试代码curltest.c位于e:/project<br>假设curllib文件夹的位置为c:/curllib<br>命令行运行下列命令编译这个测试程序：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="symbol">e:</span>/project  </span><br><span class="line">gcc -<span class="constant">I</span>. -<span class="constant">Ic</span><span class="symbol">:/curllib/include</span> -g -<span class="constant">O2</span> -<span class="constant">DCURL</span>\_STATICLIB -c curltest.c  </span><br><span class="line">gcc -s -o curltest.exe curltest.o -<span class="constant">Lc</span><span class="symbol">:/curllib/lib</span> -lcurl -lwldap32</span><br><span class="line">-lws2\_32</span><br></pre></td></tr></table></figure>
<p>这时可以看到curltest.c目录下生成了一个curltest.exe文件<br>接着在命令行输入：  </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">curltest</span><span class="class">.exe</span></span><br></pre></td></tr></table></figure>
<p>如果看到命令行窗口输出一些HTML代码，就表示编译成功</p>
<p>** 方法二、Code::Blocks中使用libcurl静态库</p>
<ol>
<li>新建工程，在工程里添加代码同上的curltest.c文件  </li>
<li>将上面curllib/include目录下的curl文件夹复制到MinGW安装目录的include目录  </li>
<li>工程名上右键打开Build Options选项，在Compiler<br>Settings选项卡下的#defines里面输入CURL_STATICLIB，（这表示使用静态库）  </li>
<li>在Linker Settings选项卡下面的link<br>libraries里添加上面curllib/lib目录里的四个文件：</li>
</ol>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">C</span><span class="pseudo">:curllibliblibcurl</span><span class="class">.a</span>  </span><br><span class="line"><span class="tag">C</span><span class="pseudo">:curllibliblibcurldll</span><span class="class">.a</span>  </span><br><span class="line"><span class="tag">C</span><span class="pseudo">:curllibliblibwldap32</span><span class="class">.a</span>  </span><br><span class="line"><span class="tag">C</span><span class="pseudo">:curllibliblibws2</span>\_32<span class="class">.a</span></span><br></pre></td></tr></table></figure>
<p>然后回到工程页面，点击Build即可</p>
<p>今天为了编译和使用libcurl库折腾了一下午，记下来供需要的人参考，需要注意的是，本文中编译的是不带ssl和zlib支持的libcurl，如果需要编译支持ssl和zlib的curl，还需要先编译openssl，zlib和libssh，编译zlib比较简单，直接使用源码自带的makefile文件即可，编译openssl需要安装MSYS和Perl，还需要修改一些代码，libssh的编译依赖openssl，网上都可以找到方法，也可以看源码的README文件。</p>
<p>附一篇在C语言中使用libcurl库的文章供参考：<br><a href="http://www.ibm.com/developerworks/cn/opensource/os-curl/" target="_blank" rel="external">使用 cURL 和 libcurl 通过 Internet<br>进行对话</a><br>下面几篇是Curl的文档和教程：<br><a href="http://curl.haxx.se/docs/httpscripting.html" target="_blank" rel="external">Scripting HTTP Requests Using<br>Curl</a><br><a href="http://curl.haxx.se/docs/manpage.html" target="_blank" rel="external">Curl Man Page</a><br><a href="http://curl.haxx.se/docs/manual.html" target="_blank" rel="external">Curl Mannul</a><br><a href="http://curl.haxx.se/libcurl/c/" target="_blank" rel="external">Using The libcurl C Interface</a><br><a href="http://curl.haxx.se/libcurl/c/example.html" target="_blank" rel="external">libcurl - small example<br>snippets</a><br><a href="http://curl.haxx.se/libcurl/c/libcurl-tutorial.html" target="_blank" rel="external">programming with<br>libcurl</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>libcurl<br>7.21以后的版本在Windows下的编译比较简单，自带了MinGW和VC环境的Makefile文件，首先去Curl官网下载源代码：<br><a href="http://curl.haxx.se/download.html" target="_bla]]>
    </summary>
    
      <category term="C" scheme="http://blog.mcxiaoke.com/tags/C/"/>
    
      <category term="Curl" scheme="http://blog.mcxiaoke.com/tags/Curl/"/>
    
      <category term="MinGW" scheme="http://blog.mcxiaoke.com/tags/MinGW/"/>
    
      <category term="Windows" scheme="http://blog.mcxiaoke.com/tags/Windows/"/>
    
      <category term="Develop" scheme="http://blog.mcxiaoke.com/categories/Develop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android程序反编译流程]]></title>
    <link href="http://blog.mcxiaoke.com/2010/11/22/android-apk-files-decompile-how-to/"/>
    <id>http://blog.mcxiaoke.com/2010/11/22/android-apk-files-decompile-how-to/</id>
    <published>2010-11-22T08:28:00.000Z</published>
    <updated>2015-07-07T08:49:28.000Z</updated>
    <content type="html"><![CDATA[<p>APK是Android<br>Package的简称，是Android平台安装包的标准封装格式，实际上是标准的zip压缩文件，里面包含清单文件，数字签名文件，压缩后的资源文件，以及二进制dex字节码文件，Android程序的反编译包括两部分，三个流程，二部分是资源文件resources.arsc的反编译和字节码文件classes.dex的反编译；三流程是资源文件反编译为人类可读的XML文本格式和图片文件，字节码文件dex反编译为标准的Java压缩格式jar(标准的Java<br>Class文件)，然后将class文件反编译为Java源代码。下面说明各个流程的方法和所需要的工具：</p>
<p><strong>1. 资源文件的反编译</strong></p>
<p>资源文件包括resources.arsc和res目录中的XML文件，如果直接打开是乱码，resources.arsc是压缩过的二进制文件，XML也是压缩过的二进制格式的文件，我们要做的是还原他们的本来面目：二进制格式的图片，和文本格式的XML文件。我们使用最方便的工具：Android<br>Apktool，这个工具的作者是XDA的高手，他同时还是Brut版Google<br>Maps的作者。这个工具使用非常方便。</p>
<p>Android<br>Apktool发布地址：<a href="http://forum.xda-developers.com/showthread.php?t=640592" target="_blank" rel="external">http://forum.xda-developers.com/showthread.php?t=640592</a><br>Android Apktool项目地址：<a href="http://code.google.com/p/android-apktool/" target="_blank" rel="external">http://code.google.com/p/android-apktool/</a></p>
<p>以Windows系统为例，需要下载这两个文件：  </p>
<p>写好的bat批处理脚本：<a href="https://android-apktool.googlecode.com/files/apktool-install-windows-r05-ibot.tar.bz2" target="_blank" rel="external">apktool-install-windows-r05-ibot.tar.bz2</a>  </p>
<p>apktool可执行文件：<a href="https://android-apktool.googlecode.com/files/apktool1.5.2.tar.bz2" target="_blank" rel="external">apktool1.5.2.tar.bz2</a></p>
<p>将它们解压到同一个文件夹就可以了，使用方法如下，<br>以Android系统自带的Gallery.apk文件为例：</p>
<ul>
<li>反编译资源文件，并将字节码反编译为smali文件：命令行输入 apktool.bat<br>d Gallery.apk<br>，当前目录下会生成一个Gallery目录，里面就是反编译好的文件，res目录里为反编译好的资源文件，smali目录里为反编译好的smali字节码文件。由于我们只需要资源文件，所以可以使用下面的命令。</li>
<li>仅反编译资源文件，命令行输入 apktool.bat d -s Gallery.apk<br>同样会生成Gallery目录，里面的res目录里为反编译好的资源文件，但是classes.dex没有反编译为smali文件。</li>
</ul>
<p><strong>2. 二进制字节码文件的反编译</strong></p>
<p>解压apk文件可以发现里面的classes.dex，这就是二进制字节码文件，我们要把它反编译为标准的Java<br>Class文件，需要的工具是dex2jar，该工具是国人开发的，目前还在不断更新中。<br>dex2jar项目地址： <a href="http://code.google.com/p/dex2jar/" target="_blank" rel="external">http://code.google.com/p/dex2jar/</a><br>dex2jar下载地址：<br><a href="https://dex2jar.googlecode.com/files/dex2jar-0.0.9.15.zip" target="_blank" rel="external">dex2jar-0.0.9.15.zip</a></p>
<p>使用方法非常简单，还是以上面的Gallery程序为例，取出里面的classes.dex文件后，命令行输入<br>dex2jar.bat classes.dex<br>就会在同级目录下发现反编译好的jar文件classes.dex.dex2jar.jar，下面的步骤就是将Jar文件反编译为Java源文件了，需要是的工具是JD-GUI，或者DJ<br>Java Decompiler。<br>JD-GUI是著名的Java反编译工具JAD的GUI版本，下载地址：<br>    <a href="http://java.decompiler.free.fr/?q=jdgui" target="_blank" rel="external">http://java.decompiler.free.fr/?q=jdgui</a><br>此程序还提供一个Eclipse插件，使用方法，直接用JD-GUI打开刚才反编译好的Jar文件就可以看到Java源代码了，如果原始程序没有经过混淆，那么你会发现代码非常清晰，很容易看懂。</p>
<p><strong>3. 使用Logcat查看代码的功能</strong></p>
<p>反编译出来后一般还有很多代码对应的功能不容易弄懂，此时可以打开程序，对照Logcat里面的调试信息，很容易看到代码对应的功能，至于代码里的资源文件ID，由于都是数字，需要到R.java里面去查找对应的资源文件名称。这是一种很好的学习的方法，但也可能被用作非法用途。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>APK是Android<br>Package的简称，是Android平台安装包的标准封装格式，实际上是标准的zip压缩文件，里面包含清单文件，数字签名文件，压缩后的资源文件，以及二进制dex字节码文件，Android程序的反编译包括两部分，三个流程，二部分是资源文件reso]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="Decompile" scheme="http://blog.mcxiaoke.com/tags/Decompile/"/>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于电子阅读软件的一些想法]]></title>
    <link href="http://blog.mcxiaoke.com/2010/11/22/thinking-of-design-a-ebook-reader/"/>
    <id>http://blog.mcxiaoke.com/2010/11/22/thinking-of-design-a-ebook-reader/</id>
    <published>2010-11-22T04:38:00.000Z</published>
    <updated>2015-07-07T09:51:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是今天发在Twitter上的一些关于电子阅读软件设计和开发的一些想法的集合，分为三个部分，一是Android平台一些阅读软件的简单评测，而是电子阅读软件的功能需求分析，三是电子阅读软件UI设计原则的思考。</p>
<p><strong>一、Android平台阅读软件的简单评测</strong></p>
<ul>
<li>91熊猫看书：启动速度慢，还要显示黑屏的LOGO，界面切换有点卡，本地书库只能载入指定路径的文件，书籍载入速度慢，按MENU键会显示系统状态栏，设置界面丑陋，系统空间和自定义颜色不协调，阅读界面无法滑动翻页</li>
<li>iReader：无法上下拖拽阅读，无法点击翻页，设置项过多，过于分散，而且全都在一个界面杂乱不清晰，无法直接呼出常用选项，背景图片选择界面没有缩略图预览，主题只有白天和夜晚选项，没有字间距选项</li>
<li>开卷有益：不支持ePub格式，下方快捷图标功能不够明确没有提示，默认字体过大，默认主题模板没有预览，其它方面没有太突出的缺点</li>
<li>星际读书：界面较为美观，但菜单是iPhone风格，不符合Android的UI设计规范，书籍打开速度过慢，章节切换速度缓慢，只支持ePub格式，设置项层次过深，不直观，无法拖拽浏览，快捷图标没有说明功能不明确，不支持背景图片</li>
<li>风行阅读：草色界面利于阅读，背景图片无法自定义，不支持ePub，无法批量导入书籍到书库，无法显示字间距，无法自定义背景图片，无法自动浏览，无法拖拽浏览，没有全文搜索</li>
<li>My Books 阅读：<br>很简陋，书籍目录更改不方便，无法直接浏览文件，没有说明支持何种格式，书籍没有导入成功，阅读功能无法测试</li>
<li>Aldiko<br>Reader：默认屏幕亮度100%，不人性化，章节切换过慢，设置预览界面简陋，不支持自定义本地文件导入目录，网络书城无法记录浏览位置和浏览记录，不支持拖拽浏览，不支持背景图片</li>
<li>Laputa<br>Pro：界面较为美观，设置项不直观，不支持拖拽浏览，不支持背景设置，不支持间距设置，不支持自动浏览，不支持全文搜索</li>
<li>FBReaderJ，是多平台的，还有PC版本，支持ePub，HTM和TXT，支持在线书库，各方面还算不错，但是本地书库文件过多时会卡死</li>
<li>GGBook：默认扫描整个SD卡，不支持自定义目录，文件较多时添加书籍界面卡斯，点击某些书籍出现乱码，有时会强制关闭，与阅读有关的设置项过少，优点是同时支持拖拽，滑动和点击三种手势</li>
<li>静读天下：国产阅读软件的新秀，设置项过于密集，层次较多，操作不便，下方图标同样没有功能说明，起始界面，设置界面与阅读界面为三种配色，风格不统一，<br>不能滑动翻页，不支持字间距</li>
<li>iSilo：这是个比较特别的阅读软件，全平台都有，支持iSilo格式，Palm格式和TXT，还有文本编辑器的功能，但作为阅读软件功能简陋了点，对中文支持不好，无法自动识别编码，优点是速度快</li>
</ul>
<p>上面列举的软件几乎都缺少的功能包括：拖拽浏览，自动浏览，睡眠模式，压缩文件支持，HTML格式支持，背景图片设置。</p>
<p><strong>二、基于以上对各个阅读软件优缺点分析，总结出的电子阅读软件的功能需求</strong></p>
<p>阅读软件的功能分为两大块：</p>
<pre><code>1. 操作，与浏览，文件，系统，网络有关的功能 
2. 样式，与字体，背景，颜色等有关的功能
</code></pre><p>阅读软件基本功能需求：</p>
<pre><code>1. 文件浏览，包括打开本地文件，导入本地书籍，本地文件的复制粘贴，删除，导入，目录浏览；
2. 阅读记录，包括阅读位置记录，书签管理，目录管理，章节提取；
3. 文本功能，包括进度跳转，全文搜索，文字复制和分享
4. 阅读手势，包括拖拽浏览，点击翻页，滑动翻页，翻页特效以及其它快捷手势操作；
5. 支持格式，应该多样化，国内的至少应该支持TXT，Umd，Brm，ePub，Html，另外可能的话应该支持MOBI，iSilo，PDF，PDB等格式
6. 主题功能，包括背景和字体颜色，字体大小，字间距行间距，背景图片，字体样式，阅读特效等；
7. 其它功能，包括自动浏览，夜间模式，古文模式(竖式排版)，睡眠模式，屏幕旋转，文字编码，章节提取等
8. 在线阅读，一个好的阅读软件应该支持在线阅读，包括网页的阅读，网络书城的书籍阅读；
9. 书籍下载，内置书城，或者搜索下载；
10. 图片浏览，支持漫画阅读，网页图片浏览；
11. 压缩文件支持，一般移动设备都支持zip格式
</code></pre><p><strong>三、阅读软件的UI设计原则</strong></p>
<p>阅读软件UI设计要求：</p>
<pre><code>1. 功能突出，既然是阅读软件，阅读当然是最重要的功能，所以阅读界面的美观就非常重要，在功能同质化的年代，要吸引用户，界面很重要；
2. 操作方便，常用的操作要直观方便，分类要清晰，层次不能过多，与阅读相关的设置要能即时预览效果
3. 界面统一，软件的多个界面UI设计思路和风格要统一，要让人感觉到这是同一个软件，不能有突兀感，包括配色和布局都要规范，还要符合特定平台的UI设计原则，比如Symbia，Android和iPhone的UI显然是不同的
4. 简洁明晰，所有的功能都应该有明确的说明和提示，图标设计应该直观的体现出它代表的功能，应该有详细的帮助说明和操作提示，所有可选的功能都应该可以关闭，对于触摸屏，所有的功能应该设计为既可以全部通过触摸操作完成，也可以使用菜单操作
</code></pre><p>目前国内的阅读软件在功能方便都做得还不错，但普遍缺点是操作不够方便，不能即时预览设置，不支持国际通用格式。记下这些想法，为以后的开发做参考。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是今天发在Twitter上的一些关于电子阅读软件设计和开发的一些想法的集合，分为三个部分，一是Android平台一些阅读软件的简单评测，而是电子阅读软件的功能需求分析，三是电子阅读软件UI设计原则的思考。</p>
<p><strong>一、Android平台阅读软件的简单]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="eBook" scheme="http://blog.mcxiaoke.com/tags/eBook/"/>
    
      <category term="Thoughts" scheme="http://blog.mcxiaoke.com/categories/Thoughts/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android中检测手机网络类型]]></title>
    <link href="http://blog.mcxiaoke.com/2010/11/03/android-get-phone-and-network-info/"/>
    <id>http://blog.mcxiaoke.com/2010/11/03/android-get-phone-and-network-info/</id>
    <published>2010-11-03T15:22:00.000Z</published>
    <updated>2015-07-07T08:46:22.000Z</updated>
    <content type="html"><![CDATA[<p>Android中检测手机制式和移动网络类型</p>
<p><strong>[还没写完，有时间再更新，并添加示例代码]</strong></p>
<p>Android中与电话功能相关的类是 TelephonyManager<br>，此类中定义了很多常量，以下分类说明<br>获取以下信息需要在AndroidManifest.xml中指定权限</p>
<p>一、 数据连接状态<br>获取数据连接状态：int getDataState()<br>获取数据活动状态：int getDataActivity()<br>常用的有这几个：  </p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> DATA_ACTIVITY_IN 数据连接状态：活动，正在接受数据  </span><br><span class="line"><span class="keyword">int</span> DATA_ACTIVITY_OUT 数据连接状态：活动，正在发送数据  </span><br><span class="line"><span class="keyword">int</span> DATA_ACTIVITY_INOUT 数据连接状态：活动，正在接受和发送数据  </span><br><span class="line"><span class="keyword">int</span> DATA_ACTIVITY_NONE 数据连接状态：活动，但无数据发送和接受  </span><br><span class="line"><span class="keyword">int</span> DATA_CONNECTED 数据连接状态：已连接  </span><br><span class="line"><span class="keyword">int</span> DATA_CONNECTING 数据连接状态：正在连接  </span><br><span class="line"><span class="keyword">int</span> DATA_DISCONNECTED 数据连接状态：断开  </span><br><span class="line"><span class="keyword">int</span> DATA_SUSPENDED 数据连接状态：暂停</span><br></pre></td></tr></table></figure>
<p>二、 移动网络类型<br>获取网络类型：int getNetworkType()<br>常用的有这几个：  </p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> NETWORK_TYPE_CDMA 网络类型为CDMA  </span><br><span class="line"><span class="keyword">int</span> NETWORK_TYPE_EDGE 网络类型为EDGE  </span><br><span class="line"><span class="keyword">int</span> NETWORK_TYPE_EVDO_0 网络类型为EVDO0  </span><br><span class="line"><span class="keyword">int</span> NETWORK_TYPE_EVDO_A 网络类型为EVDOA  </span><br><span class="line"><span class="keyword">int</span> NETWORK_TYPE_GPRS 网络类型为GPRS  </span><br><span class="line"><span class="keyword">int</span> NETWORK_TYPE_HSDPA 网络类型为HSDPA  </span><br><span class="line"><span class="keyword">int</span> NETWORK_TYPE_HSPA 网络类型为HSPA  </span><br><span class="line"><span class="keyword">int</span> NETWORK_TYPE_HSUPA 网络类型为HSUPA  </span><br><span class="line"><span class="keyword">int</span> NETWORK_TYPE_UMTS 网络类型为UMTS</span><br></pre></td></tr></table></figure>
<p>在中国，联通的3G为UMTS或HSDPA，移动和联通的2G为GPRS或EGDE，电信的2G为CDMA，电信的3G为EVDO</p>
<p>三、 手机制式类型<br>获取手机制式：int getPhoneType()  </p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> PHONE_TYPE_CDMA 手机制式为CDMA，电信  </span><br><span class="line"><span class="keyword">int</span> PHONE_TYPE_GSM 手机制式为GSM，移动和联通  </span><br><span class="line"><span class="keyword">int</span> PHONE_TYPE_NONE 手机制式未知</span><br></pre></td></tr></table></figure>
<p>四、 SIM卡状态<br>获取SIM卡状态：int getSimState()  </p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> SIM_STATE_ABSENT SIM卡未找到  </span><br><span class="line"><span class="keyword">int</span> SIM_STATE_NETWORK_LOCKED SIM卡网络被锁定，需要Network PIN解锁  </span><br><span class="line"><span class="keyword">int</span> SIM_STATE_PIN_REQ<span class="built_in">UIRED</span> SIM卡PIN被锁定，需要User PIN解锁  </span><br><span class="line"><span class="keyword">int</span> SIM_STATE_PUK_REQ<span class="built_in">UIRED</span> SIM卡PUK被锁定，需要User PUK解锁  </span><br><span class="line"><span class="keyword">int</span> SIM_STATE_READY SIM卡可用  </span><br><span class="line"><span class="keyword">int</span> SIM_STATE_UNKNOWN SIM卡未知</span><br></pre></td></tr></table></figure>
<p>五、其它信息  </p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">String <span class="function"><span class="title">getSimCountryIso</span><span class="params">()</span></span>  </span><br><span class="line">返回SIM卡提供商的国家代码  </span><br><span class="line">String <span class="function"><span class="title">getNetworkCountryIso</span><span class="params">()</span></span>  </span><br><span class="line">返回ISO标准的国家码，即国际长途区号  </span><br><span class="line">String <span class="function"><span class="title">getSimOperator</span><span class="params">()</span></span>  </span><br><span class="line">String <span class="function"><span class="title">getNetworkOperator</span><span class="params">()</span></span>  </span><br><span class="line">返回MCC+MNC代码 (SIM卡运营商国家代码和运营商网络代码)(IMSI)  </span><br><span class="line">String <span class="function"><span class="title">getSimOperatorName</span><span class="params">()</span></span>  </span><br><span class="line">String <span class="function"><span class="title">getNetworkOperatorName</span><span class="params">()</span></span>  </span><br><span class="line">返回移动网络运营商的名字(SPN)  </span><br><span class="line">String <span class="function"><span class="title">getSubscriberId</span><span class="params">()</span></span>  </span><br><span class="line">返回IMSI，即国际移动用户识别码  </span><br><span class="line">String <span class="function"><span class="title">getDeviceId</span><span class="params">()</span></span>  </span><br><span class="line">如果是GSM网络，返回IMEI；如果是CDMA网络，返回MEID  </span><br><span class="line">String <span class="function"><span class="title">getSimSerialNumber</span><span class="params">()</span></span>  </span><br><span class="line">返回SIM卡的序列号(IMEI)  </span><br><span class="line">String <span class="function"><span class="title">getLine1Number</span><span class="params">()</span></span>  </span><br><span class="line">返回手机号码，对于GSM网络来说即MSISDN  </span><br><span class="line">boolean <span class="function"><span class="title">isNetworkRoaming</span><span class="params">()</span></span>  </span><br><span class="line">返回手机是否处于漫游状态</span><br></pre></td></tr></table></figure>
<p>解释：<br>IMSI是国际移动用户识别码的简称(International Mobile Subscriber<br>Identity)<br>IMSI共有15位，其结构如下：<br>MCC+MNC+MIN<br>MCC：Mobile Country Code，移动国家码，共3位，中国为460;<br>MNC:Mobile NetworkCode，移动网络码，共2位<br>在中国，移动的代码为电00和02，联通的代码为01，电信的代码为03<br>合起来就是（也是Android手机中APN配置文件中的代码）：<br>中国移动：46000 46002<br>中国联通：46001<br>中国电信：46003<br>举例，一个典型的IMSI号码为460030912121001</p>
<p>IMEI是International Mobile Equipment Identity<br>（国际移动设备标识）的简称  </p>
<p>IMEI由15位数字组成的”电子串号”，它与每台手机一一对应，而且该码是全世界唯一的<br>其组成为：  </p>
<ol>
<li>前6位数(TAC)是”型号核准号码”，一般代表机型  </li>
<li>接着的2位数(FAC)是”最后装配号”，一般代表产地  </li>
<li>之后的6位数(SNR)是”串号”，一般代表生产顺序号  </li>
<li>最后1位数(SP)通常是”0”，为检验码，目前暂备用</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android中检测手机制式和移动网络类型</p>
<p><strong>[还没写完，有时间再更新，并添加示例代码]</strong></p>
<p>Android中与电话功能相关的类是 TelephonyManager<br>，此类中定义了很多常量，以下分类说明<br>获]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="Mobile" scheme="http://blog.mcxiaoke.com/tags/Mobile/"/>
    
      <category term="Network" scheme="http://blog.mcxiaoke.com/tags/Network/"/>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Servlet中使用Twitter OAuth认证]]></title>
    <link href="http://blog.mcxiaoke.com/2010/10/31/servlet-twitter-oauth-twitter4j/"/>
    <id>http://blog.mcxiaoke.com/2010/10/31/servlet-twitter-oauth-twitter4j/</id>
    <published>2010-10-31T14:09:00.000Z</published>
    <updated>2015-07-07T08:47:51.000Z</updated>
    <content type="html"><![CDATA[<p>例子来自Twitter4j的作者，我自己的代码等完善了再发布：</p>
<p>主要原理是在Twitter验证完毕后重定向到Callback的网址时，获取网址后面的oauth_verifier参数，进而获取AccessToken，并存储供以后使用。</p>
<p>SigninServlet</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> twitter4j.examples.signin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> twitter4j.<span class="type">Twitter</span>;  </span><br><span class="line"><span class="keyword">import</span> twitter4j.<span class="type">TwitterException</span>;  </span><br><span class="line"><span class="keyword">import</span> twitter4j.http.<span class="type">RequestToken</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;  </span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">SigninServlet</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">HttpServlet</span> &#123;</span>  </span><br><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = -<span class="number">6205814293093350242</span>L;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span></span><br><span class="line">response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;  </span><br><span class="line"><span class="type">Twitter</span> twitter = <span class="keyword">new</span> <span class="type">Twitter</span>();  </span><br><span class="line">request.getSession().setAttribute(<span class="string">"twitter"</span>, twitter);  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line"><span class="type">StringBuffer</span> callbackURL = request.getRequestURL();  </span><br><span class="line">int index = callbackURL.lastIndexOf(<span class="string">"/"</span>);  </span><br><span class="line">callbackURL.replace(index, callbackURL.length(),</span><br><span class="line"><span class="string">""</span>).append(<span class="string">"/callback"</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">RequestToken</span> requestToken =</span><br><span class="line">twitter.getOAuthRequestToken(callbackURL.toString());  </span><br><span class="line">request.getSession().setAttribute(<span class="string">"requestToken"</span>, requestToken);  </span><br><span class="line">response.sendRedirect(requestToken.getAuthenticationURL());</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="type">TwitterException</span> e) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">ServletException</span>(e);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CallbackServlet</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> twitter4j.examples.signin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> twitter4j.<span class="type">Twitter</span>;  </span><br><span class="line"><span class="keyword">import</span> twitter4j.<span class="type">TwitterException</span>;  </span><br><span class="line"><span class="keyword">import</span> twitter4j.http.<span class="type">RequestToken</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.<span class="type">ServletException</span>;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServlet</span>;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletRequest</span>;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.<span class="type">HttpServletResponse</span>;  </span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">IOException</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">CallbackServlet</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">HttpServlet</span> &#123;</span>  </span><br><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> long serialVersionUID = <span class="number">1657390011452788111</span>L;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> void doGet(<span class="type">HttpServletRequest</span> request, <span class="type">HttpServletResponse</span></span><br><span class="line">response) <span class="keyword">throws</span> <span class="type">ServletException</span>, <span class="type">IOException</span> &#123;  </span><br><span class="line"><span class="type">Twitter</span> twitter = (<span class="type">Twitter</span>)</span><br><span class="line">request.getSession().getAttribute(<span class="string">"twitter"</span>);  </span><br><span class="line"><span class="type">RequestToken</span> requestToken = (<span class="type">RequestToken</span>)</span><br><span class="line">request.getSession().getAttribute(<span class="string">"requestToken"</span>);  </span><br><span class="line"><span class="type">String</span> verifier = request.getParameter(<span class="string">"oauth\_verifier"</span>);  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">twitter.getOAuthAccessToken(requestToken, verifier);  </span><br><span class="line">request.getSession().removeAttribute(<span class="string">"requestToken"</span>);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="type">TwitterException</span> e) &#123;  </span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">ServletException</span>(e);  </span><br><span class="line">&#125;  </span><br><span class="line">response.sendRedirect(request.getContextPath()+ <span class="string">"/"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>例子来自Twitter4j的作者，我自己的代码等完善了再发布：</p>
<p>主要原理是在Twitter验证完毕后重定向到Callback的网址时，获取网址后面的oauth_verifier参数，进而获取AccessToken，并存储供以后使用。</p>
<p>Signin]]>
    </summary>
    
      <category term="Java" scheme="http://blog.mcxiaoke.com/tags/Java/"/>
    
      <category term="OAuth" scheme="http://blog.mcxiaoke.com/tags/OAuth/"/>
    
      <category term="Twitter" scheme="http://blog.mcxiaoke.com/tags/Twitter/"/>
    
      <category term="Java" scheme="http://blog.mcxiaoke.com/categories/Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android AsyncTask简单用法]]></title>
    <link href="http://blog.mcxiaoke.com/2010/10/12/android-asynctask-simple-use/"/>
    <id>http://blog.mcxiaoke.com/2010/10/12/android-asynctask-simple-use/</id>
    <published>2010-10-12T02:02:00.000Z</published>
    <updated>2015-07-07T08:49:33.000Z</updated>
    <content type="html"><![CDATA[<p>三个泛型参数：  </p>
<ul>
<li>Param 任务执行器需要的数据类型  </li>
<li>Progress 后台计算中使用的进度单位数据类型  </li>
<li>Result 后台计算返回结果的数据类型  </li>
</ul>
<p>有些参数是可以设置为不使用的，只要传递为Void型即可，比如 <code>AsyncTask&lt;Void,Void, Void&gt;</code></p>
<p>四个步骤：  </p>
<ul>
<li>onPreExecute() 执行预处理，它运行于UI线程，可以为后台任务做一些准备工作，比如绘制一个进度条控件。  </li>
<li>doInBackground(Params…) 后台进程执行的具体计算在这里实现，doInBackground(Params…)是AsyncTask的关键，此方法必须重载。在这个方法内可以使用publishProgress(Progress…)改变当前的进度值。  </li>
<li>onProgressUpdate(Progress…) 运行于UI线程。如果在doInBackground(Params…)中<br>使用了publishProgress(Progress…)，就会触发这个方法。在这里可以对进度条控件根据进度值做出具体的响应。  </li>
<li>onPostExecute(Result) 运行于UI线程，可以对后台任务的结果做出处理，结果就是doInBackground(Params…)的返回值。此方法也要经常重载，如果Result为null表明后台任务没有完成(被取消或者出现异常)。</li>
</ul>
<p>这4个方法都不能手动调用。而且除了doInBackground(Params…)方法，其余3个方法都是被UI线程所调用的，所以要求：  </p>
<ol>
<li>AsyncTask的实例必须在UI thread中创建；  </li>
<li>AsyncTask.execute方法必须在UI thread中调用；</li>
</ol>
<p>Task只能被执行一次，多次调用时将会出现异常,而且是不能手动停止。</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * <span class="doctag">@author</span> mcxiaoke</span><br><span class="line"> * <span class="doctag">@date</span> 2010.10.12</span><br><span class="line"> * <span class="doctag">@description</span> AsyncTask Test</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTaskTest</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    TextView tv;</span><br><span class="line">    <span class="keyword">final</span> String TAG = <span class="string">"AsyncTaskTest"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line">        tv = (TextView) findViewById(R.id.label);</span><br><span class="line">        <span class="keyword">new</span> MyTask().execute(<span class="number">6</span>, <span class="number">12</span>, <span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Integer</span>, <span class="title">Integer</span>, <span class="title">Integer</span>&gt;</span><br><span class="line"></span><br><span class="line">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onPreExecute();</span><br><span class="line">            Log.d(TAG, <span class="string">"onPreExecute()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Integer <span class="title">doInBackground</span><span class="params">(Integer... params)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"doInBackground()"</span>);</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; params.length;</span><br><span class="line">                 index++) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = params[index];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num;</span><br><span class="line">                     j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (num - j &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p++;</span><br><span class="line">                    publishProgress(p);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... progress)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"onProgressUpdate()"</span>);</span><br><span class="line">            tv.append(<span class="string">"nProgress: "</span> + progress[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Integer result)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"onPostExecute()"</span>);</span><br><span class="line">            tv.append(<span class="string">"nFinished. Result: "</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onCancelled();</span><br><span class="line">            Log.d(TAG, <span class="string">"onCancelled()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>三个泛型参数：  </p>
<ul>
<li>Param 任务执行器需要的数据类型  </li>
<li>Progress 后台计算中使用的进度单位数据类型  </li>
<li>Result 后台计算返回结果的数据类型  </li>
</ul>
<p>有些参数是可以设置为]]>
    </summary>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/tags/Android/"/>
    
      <category term="AsyncTask" scheme="http://blog.mcxiaoke.com/tags/AsyncTask/"/>
    
      <category term="Android" scheme="http://blog.mcxiaoke.com/categories/Android/"/>
    
  </entry>
  
</feed>
